                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Jun 20 2015) (MINGW64)
                                      4 ; This file was generated Sat Apr 30 22:55:24 2016
                                      5 ;--------------------------------------------------------
                                      6 	.module lcd
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _Main
                                     13 	.globl _CY
                                     14 	.globl _AC
                                     15 	.globl _F0
                                     16 	.globl _RS1
                                     17 	.globl _RS0
                                     18 	.globl _OV
                                     19 	.globl _F1
                                     20 	.globl _P
                                     21 	.globl _PS
                                     22 	.globl _PT1
                                     23 	.globl _PX1
                                     24 	.globl _PT0
                                     25 	.globl _PX0
                                     26 	.globl _RD
                                     27 	.globl _WR
                                     28 	.globl _T1
                                     29 	.globl _T0
                                     30 	.globl _INT1
                                     31 	.globl _INT0
                                     32 	.globl _TXD
                                     33 	.globl _RXD
                                     34 	.globl _P3_7
                                     35 	.globl _P3_6
                                     36 	.globl _P3_5
                                     37 	.globl _P3_4
                                     38 	.globl _P3_3
                                     39 	.globl _P3_2
                                     40 	.globl _P3_1
                                     41 	.globl _P3_0
                                     42 	.globl _EA
                                     43 	.globl _ES
                                     44 	.globl _ET1
                                     45 	.globl _EX1
                                     46 	.globl _ET0
                                     47 	.globl _EX0
                                     48 	.globl _P2_7
                                     49 	.globl _P2_6
                                     50 	.globl _P2_5
                                     51 	.globl _P2_4
                                     52 	.globl _P2_3
                                     53 	.globl _P2_2
                                     54 	.globl _P2_1
                                     55 	.globl _P2_0
                                     56 	.globl _SM0
                                     57 	.globl _SM1
                                     58 	.globl _SM2
                                     59 	.globl _REN
                                     60 	.globl _TB8
                                     61 	.globl _RB8
                                     62 	.globl _TI
                                     63 	.globl _RI
                                     64 	.globl _P1_7
                                     65 	.globl _P1_6
                                     66 	.globl _P1_5
                                     67 	.globl _P1_4
                                     68 	.globl _P1_3
                                     69 	.globl _P1_2
                                     70 	.globl _P1_1
                                     71 	.globl _P1_0
                                     72 	.globl _TF1
                                     73 	.globl _TR1
                                     74 	.globl _TF0
                                     75 	.globl _TR0
                                     76 	.globl _IE1
                                     77 	.globl _IT1
                                     78 	.globl _IE0
                                     79 	.globl _IT0
                                     80 	.globl _P0_7
                                     81 	.globl _P0_6
                                     82 	.globl _P0_5
                                     83 	.globl _P0_4
                                     84 	.globl _P0_3
                                     85 	.globl _P0_2
                                     86 	.globl _P0_1
                                     87 	.globl _P0_0
                                     88 	.globl _B
                                     89 	.globl _ACC
                                     90 	.globl _PSW
                                     91 	.globl _IP
                                     92 	.globl _P3
                                     93 	.globl _IE
                                     94 	.globl _P2
                                     95 	.globl _SBUF
                                     96 	.globl _SCON
                                     97 	.globl _P1
                                     98 	.globl _TH1
                                     99 	.globl _TH0
                                    100 	.globl _TL1
                                    101 	.globl _TL0
                                    102 	.globl _TMOD
                                    103 	.globl _TCON
                                    104 	.globl _PCON
                                    105 	.globl _DPH
                                    106 	.globl _DPL
                                    107 	.globl _SP
                                    108 	.globl _P0
                                    109 	.globl _cursorOrDisplayShift_PARM_2
                                    110 	.globl _cursorOrDisplayShift_PARM_1
                                    111 	.globl _displayOnOffControl_PARM_3
                                    112 	.globl _displayOnOffControl_PARM_2
                                    113 	.globl _displayOnOffControl_PARM_1
                                    114 	.globl _returnHome
                                    115 	.globl _entryModeSet
                                    116 	.globl _displayOnOffControl
                                    117 	.globl _cursorOrDisplayShift
                                    118 	.globl _functionSet
                                    119 	.globl _clearDisplay
                                    120 	.globl _setDdRamAddress
                                    121 	.globl _sendChar
                                    122 	.globl _sendString
                                    123 	.globl _delay
                                    124 	.globl _big_delay
                                    125 ;--------------------------------------------------------
                                    126 ; special function registers
                                    127 ;--------------------------------------------------------
                                    128 	.area RSEG    (ABS,DATA)
      000000                        129 	.org 0x0000
                           000080   130 _P0	=	0x0080
                           000081   131 _SP	=	0x0081
                           000082   132 _DPL	=	0x0082
                           000083   133 _DPH	=	0x0083
                           000087   134 _PCON	=	0x0087
                           000088   135 _TCON	=	0x0088
                           000089   136 _TMOD	=	0x0089
                           00008A   137 _TL0	=	0x008a
                           00008B   138 _TL1	=	0x008b
                           00008C   139 _TH0	=	0x008c
                           00008D   140 _TH1	=	0x008d
                           000090   141 _P1	=	0x0090
                           000098   142 _SCON	=	0x0098
                           000099   143 _SBUF	=	0x0099
                           0000A0   144 _P2	=	0x00a0
                           0000A8   145 _IE	=	0x00a8
                           0000B0   146 _P3	=	0x00b0
                           0000B8   147 _IP	=	0x00b8
                           0000D0   148 _PSW	=	0x00d0
                           0000E0   149 _ACC	=	0x00e0
                           0000F0   150 _B	=	0x00f0
                                    151 ;--------------------------------------------------------
                                    152 ; special function bits
                                    153 ;--------------------------------------------------------
                                    154 	.area RSEG    (ABS,DATA)
      000000                        155 	.org 0x0000
                           000080   156 _P0_0	=	0x0080
                           000081   157 _P0_1	=	0x0081
                           000082   158 _P0_2	=	0x0082
                           000083   159 _P0_3	=	0x0083
                           000084   160 _P0_4	=	0x0084
                           000085   161 _P0_5	=	0x0085
                           000086   162 _P0_6	=	0x0086
                           000087   163 _P0_7	=	0x0087
                           000088   164 _IT0	=	0x0088
                           000089   165 _IE0	=	0x0089
                           00008A   166 _IT1	=	0x008a
                           00008B   167 _IE1	=	0x008b
                           00008C   168 _TR0	=	0x008c
                           00008D   169 _TF0	=	0x008d
                           00008E   170 _TR1	=	0x008e
                           00008F   171 _TF1	=	0x008f
                           000090   172 _P1_0	=	0x0090
                           000091   173 _P1_1	=	0x0091
                           000092   174 _P1_2	=	0x0092
                           000093   175 _P1_3	=	0x0093
                           000094   176 _P1_4	=	0x0094
                           000095   177 _P1_5	=	0x0095
                           000096   178 _P1_6	=	0x0096
                           000097   179 _P1_7	=	0x0097
                           000098   180 _RI	=	0x0098
                           000099   181 _TI	=	0x0099
                           00009A   182 _RB8	=	0x009a
                           00009B   183 _TB8	=	0x009b
                           00009C   184 _REN	=	0x009c
                           00009D   185 _SM2	=	0x009d
                           00009E   186 _SM1	=	0x009e
                           00009F   187 _SM0	=	0x009f
                           0000A0   188 _P2_0	=	0x00a0
                           0000A1   189 _P2_1	=	0x00a1
                           0000A2   190 _P2_2	=	0x00a2
                           0000A3   191 _P2_3	=	0x00a3
                           0000A4   192 _P2_4	=	0x00a4
                           0000A5   193 _P2_5	=	0x00a5
                           0000A6   194 _P2_6	=	0x00a6
                           0000A7   195 _P2_7	=	0x00a7
                           0000A8   196 _EX0	=	0x00a8
                           0000A9   197 _ET0	=	0x00a9
                           0000AA   198 _EX1	=	0x00aa
                           0000AB   199 _ET1	=	0x00ab
                           0000AC   200 _ES	=	0x00ac
                           0000AF   201 _EA	=	0x00af
                           0000B0   202 _P3_0	=	0x00b0
                           0000B1   203 _P3_1	=	0x00b1
                           0000B2   204 _P3_2	=	0x00b2
                           0000B3   205 _P3_3	=	0x00b3
                           0000B4   206 _P3_4	=	0x00b4
                           0000B5   207 _P3_5	=	0x00b5
                           0000B6   208 _P3_6	=	0x00b6
                           0000B7   209 _P3_7	=	0x00b7
                           0000B0   210 _RXD	=	0x00b0
                           0000B1   211 _TXD	=	0x00b1
                           0000B2   212 _INT0	=	0x00b2
                           0000B3   213 _INT1	=	0x00b3
                           0000B4   214 _T0	=	0x00b4
                           0000B5   215 _T1	=	0x00b5
                           0000B6   216 _WR	=	0x00b6
                           0000B7   217 _RD	=	0x00b7
                           0000B8   218 _PX0	=	0x00b8
                           0000B9   219 _PT0	=	0x00b9
                           0000BA   220 _PX1	=	0x00ba
                           0000BB   221 _PT1	=	0x00bb
                           0000BC   222 _PS	=	0x00bc
                           0000D0   223 _P	=	0x00d0
                           0000D1   224 _F1	=	0x00d1
                           0000D2   225 _OV	=	0x00d2
                           0000D3   226 _RS0	=	0x00d3
                           0000D4   227 _RS1	=	0x00d4
                           0000D5   228 _F0	=	0x00d5
                           0000D6   229 _AC	=	0x00d6
                           0000D7   230 _CY	=	0x00d7
                                    231 ;--------------------------------------------------------
                                    232 ; overlayable register banks
                                    233 ;--------------------------------------------------------
                                    234 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        235 	.ds 8
                                    236 ;--------------------------------------------------------
                                    237 ; internal ram data
                                    238 ;--------------------------------------------------------
                                    239 	.area DSEG    (DATA)
                                    240 ;--------------------------------------------------------
                                    241 ; overlayable items in internal ram 
                                    242 ;--------------------------------------------------------
                                    243 	.area	OSEG    (OVR,DATA)
                                    244 	.area	OSEG    (OVR,DATA)
                                    245 ;--------------------------------------------------------
                                    246 ; indirectly addressable internal ram data
                                    247 ;--------------------------------------------------------
                                    248 	.area ISEG    (DATA)
                                    249 ;--------------------------------------------------------
                                    250 ; absolute internal ram data
                                    251 ;--------------------------------------------------------
                                    252 	.area IABS    (ABS,DATA)
                                    253 	.area IABS    (ABS,DATA)
                                    254 ;--------------------------------------------------------
                                    255 ; bit data
                                    256 ;--------------------------------------------------------
                                    257 	.area BSEG    (BIT)
      000000                        258 _displayOnOffControl_PARM_1:
      000000                        259 	.ds 1
      000001                        260 _displayOnOffControl_PARM_2:
      000001                        261 	.ds 1
      000002                        262 _displayOnOffControl_PARM_3:
      000002                        263 	.ds 1
      000003                        264 _cursorOrDisplayShift_PARM_1:
      000003                        265 	.ds 1
      000004                        266 _cursorOrDisplayShift_PARM_2:
      000004                        267 	.ds 1
                                    268 ;--------------------------------------------------------
                                    269 ; paged external ram data
                                    270 ;--------------------------------------------------------
                                    271 	.area PSEG    (PAG,XDATA)
                                    272 ;--------------------------------------------------------
                                    273 ; external ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area XSEG    (XDATA)
                                    276 ;--------------------------------------------------------
                                    277 ; absolute external ram data
                                    278 ;--------------------------------------------------------
                                    279 	.area XABS    (ABS,XDATA)
                                    280 ;--------------------------------------------------------
                                    281 ; external initialized ram data
                                    282 ;--------------------------------------------------------
                                    283 	.area XISEG   (XDATA)
                                    284 	.area HOME    (CODE)
                                    285 	.area GSINIT0 (CODE)
                                    286 	.area GSINIT1 (CODE)
                                    287 	.area GSINIT2 (CODE)
                                    288 	.area GSINIT3 (CODE)
                                    289 	.area GSINIT4 (CODE)
                                    290 	.area GSINIT5 (CODE)
                                    291 	.area GSINIT  (CODE)
                                    292 	.area GSFINAL (CODE)
                                    293 	.area CSEG    (CODE)
                                    294 ;--------------------------------------------------------
                                    295 ; global & static initialisations
                                    296 ;--------------------------------------------------------
                                    297 	.area HOME    (CODE)
                                    298 	.area GSINIT  (CODE)
                                    299 	.area GSFINAL (CODE)
                                    300 	.area GSINIT  (CODE)
                                    301 ;--------------------------------------------------------
                                    302 ; Home
                                    303 ;--------------------------------------------------------
                                    304 	.area HOME    (CODE)
                                    305 	.area HOME    (CODE)
                                    306 ;--------------------------------------------------------
                                    307 ; code
                                    308 ;--------------------------------------------------------
                                    309 	.area CSEG    (CODE)
                                    310 ;------------------------------------------------------------
                                    311 ;Allocation info for local variables in function 'Main'
                                    312 ;------------------------------------------------------------
                                    313 ;	lcd.c:24: void Main(void) {
                                    314 ;	-----------------------------------------
                                    315 ;	 function Main
                                    316 ;	-----------------------------------------
      000000                        317 _Main:
                           000007   318 	ar7 = 0x07
                           000006   319 	ar6 = 0x06
                           000005   320 	ar5 = 0x05
                           000004   321 	ar4 = 0x04
                           000003   322 	ar3 = 0x03
                           000002   323 	ar2 = 0x02
                           000001   324 	ar1 = 0x01
                           000000   325 	ar0 = 0x00
                                    326 ;	lcd.c:25: functionSet();
      000000 12r00rC4         [24]  327 	lcall	_functionSet
                                    328 ;	lcd.c:26: entryModeSet(); // increment and no shift
      000003 12r00r7E         [24]  329 	lcall	_entryModeSet
                                    330 ;	lcd.c:27: displayOnOffControl(0, 1, 1); // display on, cursor on and blinking on
      000006 C2*00            [12]  331 	clr	_displayOnOffControl_PARM_1
      000008 D2*01            [12]  332 	setb	_displayOnOffControl_PARM_2
      00000A D2*02            [12]  333 	setb	_displayOnOffControl_PARM_3
      00000C 12r00r8A         [24]  334 	lcall	_displayOnOffControl
                                    335 ;	lcd.c:28: sendString("Welcome");
      00000F 90r00r00         [24]  336 	mov	dptr,#___str_0
      000012 75 F0 80         [24]  337 	mov	b,#0x80
      000015 12r00rF9         [24]  338 	lcall	_sendString
                                    339 ;	lcd.c:29: setDdRamAddress(0x40); // set address to start of second line
      000018 75 82 40         [24]  340 	mov	dpl,#0x40
      00001B 12r00rDC         [24]  341 	lcall	_setDdRamAddress
                                    342 ;	lcd.c:30: sendString("EECS113 Students");
      00001E 90r00r08         [24]  343 	mov	dptr,#___str_1
      000021 75 F0 80         [24]  344 	mov	b,#0x80
      000024 12r00rF9         [24]  345 	lcall	_sendString
                                    346 ;	lcd.c:31: sendString("hello");
      000027 90r00r19         [24]  347 	mov	dptr,#___str_2
      00002A 75 F0 80         [24]  348 	mov	b,#0x80
      00002D 12r00rF9         [24]  349 	lcall	_sendString
                                    350 ;	lcd.c:33: while (1) {
      000030                        351 00113$:
                                    352 ;	lcd.c:34: if (clear == 0) {
      000030 20 A0 05         [24]  353 	jb	_P2_0,00110$
                                    354 ;	lcd.c:35: clearDisplay();
      000033 12r00rD0         [24]  355 	lcall	_clearDisplay
      000036 80 F8            [24]  356 	sjmp	00113$
      000038                        357 00110$:
                                    358 ;	lcd.c:37: else if (msg1 == 0){
      000038 20 A1 20         [24]  359 	jb	_P2_1,00107$
                                    360 ;	lcd.c:38: clearDisplay();   // Clear the display and return the cursor to the home position
      00003B 12r00rD0         [24]  361 	lcall	_clearDisplay
                                    362 ;	lcd.c:39: sendString("How are you");
      00003E 90r00r1F         [24]  363 	mov	dptr,#___str_3
      000041 75 F0 80         [24]  364 	mov	b,#0x80
      000044 12r00rF9         [24]  365 	lcall	_sendString
                                    366 ;	lcd.c:40: setDdRamAddress(0x44); // set the display to the 5th place of the LCD line 2
      000047 75 82 44         [24]  367 	mov	dpl,#0x44
      00004A 12r00rDC         [24]  368 	lcall	_setDdRamAddress
                                    369 ;	lcd.c:41: sendString("today?");
      00004D 90r00r2B         [24]  370 	mov	dptr,#___str_4
      000050 75 F0 80         [24]  371 	mov	b,#0x80
      000053 12r00rF9         [24]  372 	lcall	_sendString
                                    373 ;	lcd.c:42: while (msg1 == 0){}  // Stay here till the msg1 switch is released
      000056                        374 00101$:
      000056 20 A1 D7         [24]  375 	jb	_P2_1,00113$
      000059 80 FB            [24]  376 	sjmp	00101$
      00005B                        377 00107$:
                                    378 ;	lcd.c:44: else if (msg2 == 0){
      00005B 20 A2 D2         [24]  379 	jb	_P2_2,00113$
                                    380 ;	lcd.c:45: clearDisplay();
      00005E 12r00rD0         [24]  381 	lcall	_clearDisplay
                                    382 ;	lcd.c:46: sendString("Loading . . .");
      000061 90r00r32         [24]  383 	mov	dptr,#___str_5
      000064 75 F0 80         [24]  384 	mov	b,#0x80
      000067 12r00rF9         [24]  385 	lcall	_sendString
                                    386 ;	lcd.c:47: big_delay();
      00006A 12r01r2F         [24]  387 	lcall	_big_delay
                                    388 ;	lcd.c:48: big_delay();
      00006D 12r01r2F         [24]  389 	lcall	_big_delay
      000070 80 BE            [24]  390 	sjmp	00113$
                                    391 ;------------------------------------------------------------
                                    392 ;Allocation info for local variables in function 'returnHome'
                                    393 ;------------------------------------------------------------
                                    394 ;	lcd.c:56: void returnHome(void) {
                                    395 ;	-----------------------------------------
                                    396 ;	 function returnHome
                                    397 ;	-----------------------------------------
      000072                        398 _returnHome:
                                    399 ;	lcd.c:57: RS = 0;
      000072 C2 B3            [12]  400 	clr	_P3_3
                                    401 ;	lcd.c:58: P1 = 0x02; // LCD command to return home (the first location of the first lcd line)
      000074 75 90 02         [24]  402 	mov	_P1,#0x02
                                    403 ;	lcd.c:59: E = 1;
      000077 D2 B2            [12]  404 	setb	_P3_2
                                    405 ;	lcd.c:60: E = 0;
      000079 C2 B2            [12]  406 	clr	_P3_2
                                    407 ;	lcd.c:61: big_delay(); // This operation needs a bigger delay
      00007B 02r01r2F         [24]  408 	ljmp	_big_delay
                                    409 ;------------------------------------------------------------
                                    410 ;Allocation info for local variables in function 'entryModeSet'
                                    411 ;------------------------------------------------------------
                                    412 ;	lcd.c:64: void entryModeSet() {
                                    413 ;	-----------------------------------------
                                    414 ;	 function entryModeSet
                                    415 ;	-----------------------------------------
      00007E                        416 _entryModeSet:
                                    417 ;	lcd.c:65: RS = 0;
      00007E C2 B3            [12]  418 	clr	_P3_3
                                    419 ;	lcd.c:66: P1 = 0x06;  
      000080 75 90 06         [24]  420 	mov	_P1,#0x06
                                    421 ;	lcd.c:67: E = 1;
      000083 D2 B2            [12]  422 	setb	_P3_2
                                    423 ;	lcd.c:68: E = 0;
      000085 C2 B2            [12]  424 	clr	_P3_2
                                    425 ;	lcd.c:69: delay();
      000087 02r01r26         [24]  426 	ljmp	_delay
                                    427 ;------------------------------------------------------------
                                    428 ;Allocation info for local variables in function 'displayOnOffControl'
                                    429 ;------------------------------------------------------------
                                    430 ;	lcd.c:72: void displayOnOffControl(__bit display, __bit cursor, __bit blinking) {
                                    431 ;	-----------------------------------------
                                    432 ;	 function displayOnOffControl
                                    433 ;	-----------------------------------------
      00008A                        434 _displayOnOffControl:
                                    435 ;	lcd.c:73: P1_7 = 0;
      00008A C2 97            [12]  436 	clr	_P1_7
                                    437 ;	lcd.c:74: P1_6 = 0;
      00008C C2 96            [12]  438 	clr	_P1_6
                                    439 ;	lcd.c:75: P1_5 = 0;
      00008E C2 95            [12]  440 	clr	_P1_5
                                    441 ;	lcd.c:76: P1_4 = 0;
      000090 C2 94            [12]  442 	clr	_P1_4
                                    443 ;	lcd.c:77: P1_3 = 1;
      000092 D2 93            [12]  444 	setb	_P1_3
                                    445 ;	lcd.c:78: P1_2 = display;
      000094 A2*00            [12]  446 	mov	c,_displayOnOffControl_PARM_1
      000096 92 92            [24]  447 	mov	_P1_2,c
                                    448 ;	lcd.c:79: P1_1 = cursor;
      000098 A2*01            [12]  449 	mov	c,_displayOnOffControl_PARM_2
      00009A 92 91            [24]  450 	mov	_P1_1,c
                                    451 ;	lcd.c:80: P1_0 = blinking;
      00009C A2*02            [12]  452 	mov	c,_displayOnOffControl_PARM_3
      00009E 92 90            [24]  453 	mov	_P1_0,c
                                    454 ;	lcd.c:81: E = 1;
      0000A0 D2 B2            [12]  455 	setb	_P3_2
                                    456 ;	lcd.c:82: E = 0;
      0000A2 C2 B2            [12]  457 	clr	_P3_2
                                    458 ;	lcd.c:83: delay();
      0000A4 02r01r26         [24]  459 	ljmp	_delay
                                    460 ;------------------------------------------------------------
                                    461 ;Allocation info for local variables in function 'cursorOrDisplayShift'
                                    462 ;------------------------------------------------------------
                                    463 ;	lcd.c:86: void cursorOrDisplayShift(__bit sc, __bit rl) {
                                    464 ;	-----------------------------------------
                                    465 ;	 function cursorOrDisplayShift
                                    466 ;	-----------------------------------------
      0000A7                        467 _cursorOrDisplayShift:
                                    468 ;	lcd.c:87: RS = 0;
      0000A7 C2 B3            [12]  469 	clr	_P3_3
                                    470 ;	lcd.c:88: P1_7 = 0;
      0000A9 C2 97            [12]  471 	clr	_P1_7
                                    472 ;	lcd.c:89: P1_6 = 0;
      0000AB C2 96            [12]  473 	clr	_P1_6
                                    474 ;	lcd.c:90: P1_5 = 0;
      0000AD C2 95            [12]  475 	clr	_P1_5
                                    476 ;	lcd.c:91: P1_4 = 1;
      0000AF D2 94            [12]  477 	setb	_P1_4
                                    478 ;	lcd.c:92: P1_3 = sc;
      0000B1 A2*03            [12]  479 	mov	c,_cursorOrDisplayShift_PARM_1
      0000B3 92 93            [24]  480 	mov	_P1_3,c
                                    481 ;	lcd.c:93: P1_2 = rl;
      0000B5 A2*04            [12]  482 	mov	c,_cursorOrDisplayShift_PARM_2
      0000B7 92 92            [24]  483 	mov	_P1_2,c
                                    484 ;	lcd.c:94: P1_1 = 0;
      0000B9 C2 91            [12]  485 	clr	_P1_1
                                    486 ;	lcd.c:95: P1_0 = 0;
      0000BB C2 90            [12]  487 	clr	_P1_0
                                    488 ;	lcd.c:96: E = 1;
      0000BD D2 B2            [12]  489 	setb	_P3_2
                                    490 ;	lcd.c:97: E = 0;
      0000BF C2 B2            [12]  491 	clr	_P3_2
                                    492 ;	lcd.c:98: delay();
      0000C1 02r01r26         [24]  493 	ljmp	_delay
                                    494 ;------------------------------------------------------------
                                    495 ;Allocation info for local variables in function 'functionSet'
                                    496 ;------------------------------------------------------------
                                    497 ;	lcd.c:101: void functionSet(void) {
                                    498 ;	-----------------------------------------
                                    499 ;	 function functionSet
                                    500 ;	-----------------------------------------
      0000C4                        501 _functionSet:
                                    502 ;	lcd.c:102: RS = 0;
      0000C4 C2 B3            [12]  503 	clr	_P3_3
                                    504 ;	lcd.c:103: P1 = 0x38; // 8-bit mode, 2 lines LCD
      0000C6 75 90 38         [24]  505 	mov	_P1,#0x38
                                    506 ;	lcd.c:104: E = 1;
      0000C9 D2 B2            [12]  507 	setb	_P3_2
                                    508 ;	lcd.c:105: E = 0;
      0000CB C2 B2            [12]  509 	clr	_P3_2
                                    510 ;	lcd.c:106: delay();
      0000CD 02r01r26         [24]  511 	ljmp	_delay
                                    512 ;------------------------------------------------------------
                                    513 ;Allocation info for local variables in function 'clearDisplay'
                                    514 ;------------------------------------------------------------
                                    515 ;	lcd.c:109: void clearDisplay(void) {
                                    516 ;	-----------------------------------------
                                    517 ;	 function clearDisplay
                                    518 ;	-----------------------------------------
      0000D0                        519 _clearDisplay:
                                    520 ;	lcd.c:110: RS = 0;
      0000D0 C2 B3            [12]  521 	clr	_P3_3
                                    522 ;	lcd.c:111: P1 = 0x01; // command to clear LCD and return the cursor to the home position
      0000D2 75 90 01         [24]  523 	mov	_P1,#0x01
                                    524 ;	lcd.c:112: E = 1;
      0000D5 D2 B2            [12]  525 	setb	_P3_2
                                    526 ;	lcd.c:113: E = 0;
      0000D7 C2 B2            [12]  527 	clr	_P3_2
                                    528 ;	lcd.c:114: big_delay(); // This operation needs a bigger delay
      0000D9 02r01r2F         [24]  529 	ljmp	_big_delay
                                    530 ;------------------------------------------------------------
                                    531 ;Allocation info for local variables in function 'setDdRamAddress'
                                    532 ;------------------------------------------------------------
                                    533 ;address                   Allocated to registers r7 
                                    534 ;------------------------------------------------------------
                                    535 ;	lcd.c:117: void setDdRamAddress(char address) {  // Determine the place to place the next character - First LCD location address in 00h for line 1 and 40h for line 2
                                    536 ;	-----------------------------------------
                                    537 ;	 function setDdRamAddress
                                    538 ;	-----------------------------------------
      0000DC                        539 _setDdRamAddress:
      0000DC AF 82            [24]  540 	mov	r7,dpl
                                    541 ;	lcd.c:118: RS = 0;
      0000DE C2 B3            [12]  542 	clr	_P3_3
                                    543 ;	lcd.c:119: P1 = address | 0x80;  // set the MSB to detect that this is an address
      0000E0 74 80            [12]  544 	mov	a,#0x80
      0000E2 4F               [12]  545 	orl	a,r7
      0000E3 F5 90            [12]  546 	mov	_P1,a
                                    547 ;	lcd.c:120: E = 1;
      0000E5 D2 B2            [12]  548 	setb	_P3_2
                                    549 ;	lcd.c:121: E = 0;
      0000E7 C2 B2            [12]  550 	clr	_P3_2
                                    551 ;	lcd.c:122: delay();
      0000E9 02r01r26         [24]  552 	ljmp	_delay
                                    553 ;------------------------------------------------------------
                                    554 ;Allocation info for local variables in function 'sendChar'
                                    555 ;------------------------------------------------------------
                                    556 ;c                         Allocated to registers r7 
                                    557 ;------------------------------------------------------------
                                    558 ;	lcd.c:127: void sendChar(char c) {  // Function to send one character to be displayed on the LCD
                                    559 ;	-----------------------------------------
                                    560 ;	 function sendChar
                                    561 ;	-----------------------------------------
      0000EC                        562 _sendChar:
      0000EC AF 82            [24]  563 	mov	r7,dpl
                                    564 ;	lcd.c:128: RS = 1;
      0000EE D2 B3            [12]  565 	setb	_P3_3
                                    566 ;	lcd.c:129: P1 = c;
      0000F0 8F 90            [24]  567 	mov	_P1,r7
                                    568 ;	lcd.c:130: E = 1;
      0000F2 D2 B2            [12]  569 	setb	_P3_2
                                    570 ;	lcd.c:131: E = 0;
      0000F4 C2 B2            [12]  571 	clr	_P3_2
                                    572 ;	lcd.c:132: delay();
      0000F6 02r01r26         [24]  573 	ljmp	_delay
                                    574 ;------------------------------------------------------------
                                    575 ;Allocation info for local variables in function 'sendString'
                                    576 ;------------------------------------------------------------
                                    577 ;str                       Allocated to registers 
                                    578 ;c                         Allocated to registers r3 
                                    579 ;------------------------------------------------------------
                                    580 ;	lcd.c:135: void sendString(char* str) {  // Function to send a string of characters to be displayed on the lCD
                                    581 ;	-----------------------------------------
                                    582 ;	 function sendString
                                    583 ;	-----------------------------------------
      0000F9                        584 _sendString:
      0000F9 AD 82            [24]  585 	mov	r5,dpl
      0000FB AE 83            [24]  586 	mov	r6,dph
      0000FD AF F0            [24]  587 	mov	r7,b
                                    588 ;	lcd.c:137: while (c = *str++) {
      0000FF                        589 00101$:
      0000FF 8D 82            [24]  590 	mov	dpl,r5
      000101 8E 83            [24]  591 	mov	dph,r6
      000103 8F F0            [24]  592 	mov	b,r7
      000105 12r00r00         [24]  593 	lcall	__gptrget
      000108 FC               [12]  594 	mov	r4,a
      000109 A3               [24]  595 	inc	dptr
      00010A AD 82            [24]  596 	mov	r5,dpl
      00010C AE 83            [24]  597 	mov	r6,dph
      00010E EC               [12]  598 	mov	a,r4
      00010F FB               [12]  599 	mov	r3,a
      000110 60 13            [24]  600 	jz	00104$
                                    601 ;	lcd.c:138: sendChar(c);
      000112 8B 82            [24]  602 	mov	dpl,r3
      000114 C0 07            [24]  603 	push	ar7
      000116 C0 06            [24]  604 	push	ar6
      000118 C0 05            [24]  605 	push	ar5
      00011A 12r00rEC         [24]  606 	lcall	_sendChar
      00011D D0 05            [24]  607 	pop	ar5
      00011F D0 06            [24]  608 	pop	ar6
      000121 D0 07            [24]  609 	pop	ar7
      000123 80 DA            [24]  610 	sjmp	00101$
      000125                        611 00104$:
      000125 22               [24]  612 	ret
                                    613 ;------------------------------------------------------------
                                    614 ;Allocation info for local variables in function 'delay'
                                    615 ;------------------------------------------------------------
                                    616 ;c                         Allocated to registers r7 
                                    617 ;------------------------------------------------------------
                                    618 ;	lcd.c:142: void delay(void) {
                                    619 ;	-----------------------------------------
                                    620 ;	 function delay
                                    621 ;	-----------------------------------------
      000126                        622 _delay:
                                    623 ;	lcd.c:144: for (c = 0; c < 50; c++);
      000126 7F 32            [12]  624 	mov	r7,#0x32
      000128                        625 00104$:
      000128 EF               [12]  626 	mov	a,r7
      000129 14               [12]  627 	dec	a
      00012A FE               [12]  628 	mov	r6,a
      00012B FF               [12]  629 	mov	r7,a
      00012C 70 FA            [24]  630 	jnz	00104$
      00012E 22               [24]  631 	ret
                                    632 ;------------------------------------------------------------
                                    633 ;Allocation info for local variables in function 'big_delay'
                                    634 ;------------------------------------------------------------
                                    635 ;c                         Allocated to registers r7 
                                    636 ;------------------------------------------------------------
                                    637 ;	lcd.c:147: void big_delay(void) {
                                    638 ;	-----------------------------------------
                                    639 ;	 function big_delay
                                    640 ;	-----------------------------------------
      00012F                        641 _big_delay:
                                    642 ;	lcd.c:149: for (c = 0; c < 255; c++);
      00012F 7F FF            [12]  643 	mov	r7,#0xFF
      000131                        644 00104$:
      000131 8F 06            [24]  645 	mov	ar6,r7
      000133 1E               [12]  646 	dec	r6
      000134 EE               [12]  647 	mov	a,r6
      000135 FF               [12]  648 	mov	r7,a
      000136 70 F9            [24]  649 	jnz	00104$
      000138 22               [24]  650 	ret
                                    651 	.area CSEG    (CODE)
                                    652 	.area CONST   (CODE)
      000000                        653 ___str_0:
      000000 57 65 6C 63 6F 6D 65   654 	.ascii "Welcome"
      000007 00                     655 	.db 0x00
      000008                        656 ___str_1:
      000008 45 45 43 53 31 31 33   657 	.ascii "EECS113 Students"
             20 53 74 75 64 65 6E
             74 73
      000018 00                     658 	.db 0x00
      000019                        659 ___str_2:
      000019 68 65 6C 6C 6F         660 	.ascii "hello"
      00001E 00                     661 	.db 0x00
      00001F                        662 ___str_3:
      00001F 48 6F 77 20 61 72 65   663 	.ascii "How are you"
             20 79 6F 75
      00002A 00                     664 	.db 0x00
      00002B                        665 ___str_4:
      00002B 74 6F 64 61 79 3F      666 	.ascii "today?"
      000031 00                     667 	.db 0x00
      000032                        668 ___str_5:
      000032 4C 6F 61 64 69 6E 67   669 	.ascii "Loading . . ."
             20 2E 20 2E 20 2E
      00003F 00                     670 	.db 0x00
                                    671 	.area XINIT   (CODE)
                                    672 	.area CABS    (ABS,CODE)
