                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Jun 20 2015) (MINGW64)
                                      4 ; This file was generated Thu May 19 22:04:53 2016
                                      5 ;--------------------------------------------------------
                                      6 	.module assignment4
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_gsinit_startup
                                     13 	.globl _main
                                     14 	.globl _int1_isr
                                     15 	.globl _int0_isr
                                     16 	.globl _atoi
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _F1
                                     24 	.globl _P
                                     25 	.globl _PS
                                     26 	.globl _PT1
                                     27 	.globl _PX1
                                     28 	.globl _PT0
                                     29 	.globl _PX0
                                     30 	.globl _RD
                                     31 	.globl _WR
                                     32 	.globl _T1
                                     33 	.globl _T0
                                     34 	.globl _INT1
                                     35 	.globl _INT0
                                     36 	.globl _TXD
                                     37 	.globl _RXD
                                     38 	.globl _P3_7
                                     39 	.globl _P3_6
                                     40 	.globl _P3_5
                                     41 	.globl _P3_4
                                     42 	.globl _P3_3
                                     43 	.globl _P3_2
                                     44 	.globl _P3_1
                                     45 	.globl _P3_0
                                     46 	.globl _EA
                                     47 	.globl _ES
                                     48 	.globl _ET1
                                     49 	.globl _EX1
                                     50 	.globl _ET0
                                     51 	.globl _EX0
                                     52 	.globl _P2_7
                                     53 	.globl _P2_6
                                     54 	.globl _P2_5
                                     55 	.globl _P2_4
                                     56 	.globl _P2_3
                                     57 	.globl _P2_2
                                     58 	.globl _P2_1
                                     59 	.globl _P2_0
                                     60 	.globl _SM0
                                     61 	.globl _SM1
                                     62 	.globl _SM2
                                     63 	.globl _REN
                                     64 	.globl _TB8
                                     65 	.globl _RB8
                                     66 	.globl _TI
                                     67 	.globl _RI
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _TF1
                                     77 	.globl _TR1
                                     78 	.globl _TF0
                                     79 	.globl _TR0
                                     80 	.globl _IE1
                                     81 	.globl _IT1
                                     82 	.globl _IE0
                                     83 	.globl _IT0
                                     84 	.globl _P0_7
                                     85 	.globl _P0_6
                                     86 	.globl _P0_5
                                     87 	.globl _P0_4
                                     88 	.globl _P0_3
                                     89 	.globl _P0_2
                                     90 	.globl _P0_1
                                     91 	.globl _P0_0
                                     92 	.globl _B
                                     93 	.globl _ACC
                                     94 	.globl _PSW
                                     95 	.globl _IP
                                     96 	.globl _P3
                                     97 	.globl _IE
                                     98 	.globl _P2
                                     99 	.globl _SBUF
                                    100 	.globl _SCON
                                    101 	.globl _P1
                                    102 	.globl _TH1
                                    103 	.globl _TH0
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TMOD
                                    107 	.globl _TCON
                                    108 	.globl _PCON
                                    109 	.globl _DPH
                                    110 	.globl _DPL
                                    111 	.globl _SP
                                    112 	.globl _P0
                                    113 	.globl _cursorOrDisplayShift_PARM_2
                                    114 	.globl _cursorOrDisplayShift_PARM_1
                                    115 	.globl _displayOnOffControl_PARM_3
                                    116 	.globl _displayOnOffControl_PARM_2
                                    117 	.globl _displayOnOffControl_PARM_1
                                    118 	.globl _displayyear_PARM_3
                                    119 	.globl _displayyear_PARM_2
                                    120 	.globl _hrminsec_PARM_3
                                    121 	.globl _hrminsec_PARM_2
                                    122 	.globl _p
                                    123 	.globl _yr
                                    124 	.globl _day
                                    125 	.globl _mon
                                    126 	.globl _sec
                                    127 	.globl _min
                                    128 	.globl _hr
                                    129 	.globl _hrminsec
                                    130 	.globl _displayyear
                                    131 	.globl _getChar
                                    132 	.globl _returnHome
                                    133 	.globl _delay
                                    134 	.globl _big_delay
                                    135 	.globl _timer_delay
                                    136 	.globl _entryModeSet
                                    137 	.globl _displayOnOffControl
                                    138 	.globl _cursorOrDisplayShift
                                    139 	.globl _functionSet
                                    140 	.globl _clearDisplay
                                    141 	.globl _setDdRamAddress
                                    142 	.globl _sendChar
                                    143 	.globl _sendString
                                    144 ;--------------------------------------------------------
                                    145 ; special function registers
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           000080   149 _P0	=	0x0080
                           000081   150 _SP	=	0x0081
                           000082   151 _DPL	=	0x0082
                           000083   152 _DPH	=	0x0083
                           000087   153 _PCON	=	0x0087
                           000088   154 _TCON	=	0x0088
                           000089   155 _TMOD	=	0x0089
                           00008A   156 _TL0	=	0x008a
                           00008B   157 _TL1	=	0x008b
                           00008C   158 _TH0	=	0x008c
                           00008D   159 _TH1	=	0x008d
                           000090   160 _P1	=	0x0090
                           000098   161 _SCON	=	0x0098
                           000099   162 _SBUF	=	0x0099
                           0000A0   163 _P2	=	0x00a0
                           0000A8   164 _IE	=	0x00a8
                           0000B0   165 _P3	=	0x00b0
                           0000B8   166 _IP	=	0x00b8
                           0000D0   167 _PSW	=	0x00d0
                           0000E0   168 _ACC	=	0x00e0
                           0000F0   169 _B	=	0x00f0
                                    170 ;--------------------------------------------------------
                                    171 ; special function bits
                                    172 ;--------------------------------------------------------
                                    173 	.area RSEG    (ABS,DATA)
      000000                        174 	.org 0x0000
                           000080   175 _P0_0	=	0x0080
                           000081   176 _P0_1	=	0x0081
                           000082   177 _P0_2	=	0x0082
                           000083   178 _P0_3	=	0x0083
                           000084   179 _P0_4	=	0x0084
                           000085   180 _P0_5	=	0x0085
                           000086   181 _P0_6	=	0x0086
                           000087   182 _P0_7	=	0x0087
                           000088   183 _IT0	=	0x0088
                           000089   184 _IE0	=	0x0089
                           00008A   185 _IT1	=	0x008a
                           00008B   186 _IE1	=	0x008b
                           00008C   187 _TR0	=	0x008c
                           00008D   188 _TF0	=	0x008d
                           00008E   189 _TR1	=	0x008e
                           00008F   190 _TF1	=	0x008f
                           000090   191 _P1_0	=	0x0090
                           000091   192 _P1_1	=	0x0091
                           000092   193 _P1_2	=	0x0092
                           000093   194 _P1_3	=	0x0093
                           000094   195 _P1_4	=	0x0094
                           000095   196 _P1_5	=	0x0095
                           000096   197 _P1_6	=	0x0096
                           000097   198 _P1_7	=	0x0097
                           000098   199 _RI	=	0x0098
                           000099   200 _TI	=	0x0099
                           00009A   201 _RB8	=	0x009a
                           00009B   202 _TB8	=	0x009b
                           00009C   203 _REN	=	0x009c
                           00009D   204 _SM2	=	0x009d
                           00009E   205 _SM1	=	0x009e
                           00009F   206 _SM0	=	0x009f
                           0000A0   207 _P2_0	=	0x00a0
                           0000A1   208 _P2_1	=	0x00a1
                           0000A2   209 _P2_2	=	0x00a2
                           0000A3   210 _P2_3	=	0x00a3
                           0000A4   211 _P2_4	=	0x00a4
                           0000A5   212 _P2_5	=	0x00a5
                           0000A6   213 _P2_6	=	0x00a6
                           0000A7   214 _P2_7	=	0x00a7
                           0000A8   215 _EX0	=	0x00a8
                           0000A9   216 _ET0	=	0x00a9
                           0000AA   217 _EX1	=	0x00aa
                           0000AB   218 _ET1	=	0x00ab
                           0000AC   219 _ES	=	0x00ac
                           0000AF   220 _EA	=	0x00af
                           0000B0   221 _P3_0	=	0x00b0
                           0000B1   222 _P3_1	=	0x00b1
                           0000B2   223 _P3_2	=	0x00b2
                           0000B3   224 _P3_3	=	0x00b3
                           0000B4   225 _P3_4	=	0x00b4
                           0000B5   226 _P3_5	=	0x00b5
                           0000B6   227 _P3_6	=	0x00b6
                           0000B7   228 _P3_7	=	0x00b7
                           0000B0   229 _RXD	=	0x00b0
                           0000B1   230 _TXD	=	0x00b1
                           0000B2   231 _INT0	=	0x00b2
                           0000B3   232 _INT1	=	0x00b3
                           0000B4   233 _T0	=	0x00b4
                           0000B5   234 _T1	=	0x00b5
                           0000B6   235 _WR	=	0x00b6
                           0000B7   236 _RD	=	0x00b7
                           0000B8   237 _PX0	=	0x00b8
                           0000B9   238 _PT0	=	0x00b9
                           0000BA   239 _PX1	=	0x00ba
                           0000BB   240 _PT1	=	0x00bb
                           0000BC   241 _PS	=	0x00bc
                           0000D0   242 _P	=	0x00d0
                           0000D1   243 _F1	=	0x00d1
                           0000D2   244 _OV	=	0x00d2
                           0000D3   245 _RS0	=	0x00d3
                           0000D4   246 _RS1	=	0x00d4
                           0000D5   247 _F0	=	0x00d5
                           0000D6   248 _AC	=	0x00d6
                           0000D7   249 _CY	=	0x00d7
                                    250 ;--------------------------------------------------------
                                    251 ; overlayable register banks
                                    252 ;--------------------------------------------------------
                                    253 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        254 	.ds 8
                                    255 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        256 	.ds 8
                                    257 ;--------------------------------------------------------
                                    258 ; overlayable bit register bank
                                    259 ;--------------------------------------------------------
                                    260 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        261 bits:
      000000                        262 	.ds 1
                           008000   263 	b0 = bits[0]
                           008100   264 	b1 = bits[1]
                           008200   265 	b2 = bits[2]
                           008300   266 	b3 = bits[3]
                           008400   267 	b4 = bits[4]
                           008500   268 	b5 = bits[5]
                           008600   269 	b6 = bits[6]
                           008700   270 	b7 = bits[7]
                                    271 ;--------------------------------------------------------
                                    272 ; internal ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area DSEG    (DATA)
      000000                        275 _hr::
      000000                        276 	.ds 2
      000002                        277 _min::
      000002                        278 	.ds 2
      000004                        279 _sec::
      000004                        280 	.ds 2
      000006                        281 _mon::
      000006                        282 	.ds 2
      000008                        283 _day::
      000008                        284 	.ds 2
      00000A                        285 _yr::
      00000A                        286 	.ds 2
      00000C                        287 _p::
      00000C                        288 	.ds 2
      00000E                        289 _int0_isr_temp_1_33:
      00000E                        290 	.ds 3
      000011                        291 _int1_isr_temp_1_55:
      000011                        292 	.ds 3
      000014                        293 _hrminsec_PARM_2:
      000014                        294 	.ds 2
      000016                        295 _hrminsec_PARM_3:
      000016                        296 	.ds 2
      000018                        297 _displayyear_PARM_2:
      000018                        298 	.ds 2
      00001A                        299 _displayyear_PARM_3:
      00001A                        300 	.ds 2
      00001C                        301 _getChar_keypad_1_97:
      00001C                        302 	.ds 12
                                    303 ;--------------------------------------------------------
                                    304 ; overlayable items in internal ram 
                                    305 ;--------------------------------------------------------
                                    306 	.area	OSEG    (OVR,DATA)
                                    307 	.area	OSEG    (OVR,DATA)
                                    308 ;--------------------------------------------------------
                                    309 ; Stack segment in internal ram 
                                    310 ;--------------------------------------------------------
                                    311 	.area	SSEG
      000000                        312 __start__stack:
      000000                        313 	.ds	1
                                    314 
                                    315 ;--------------------------------------------------------
                                    316 ; indirectly addressable internal ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area ISEG    (DATA)
                                    319 ;--------------------------------------------------------
                                    320 ; absolute internal ram data
                                    321 ;--------------------------------------------------------
                                    322 	.area IABS    (ABS,DATA)
                                    323 	.area IABS    (ABS,DATA)
                                    324 ;--------------------------------------------------------
                                    325 ; bit data
                                    326 ;--------------------------------------------------------
                                    327 	.area BSEG    (BIT)
      000000                        328 _displayOnOffControl_PARM_1:
      000000                        329 	.ds 1
      000001                        330 _displayOnOffControl_PARM_2:
      000001                        331 	.ds 1
      000002                        332 _displayOnOffControl_PARM_3:
      000002                        333 	.ds 1
      000003                        334 _cursorOrDisplayShift_PARM_1:
      000003                        335 	.ds 1
      000004                        336 _cursorOrDisplayShift_PARM_2:
      000004                        337 	.ds 1
                                    338 ;--------------------------------------------------------
                                    339 ; paged external ram data
                                    340 ;--------------------------------------------------------
                                    341 	.area PSEG    (PAG,XDATA)
                                    342 ;--------------------------------------------------------
                                    343 ; external ram data
                                    344 ;--------------------------------------------------------
                                    345 	.area XSEG    (XDATA)
                                    346 ;--------------------------------------------------------
                                    347 ; absolute external ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area XABS    (ABS,XDATA)
                                    350 ;--------------------------------------------------------
                                    351 ; external initialized ram data
                                    352 ;--------------------------------------------------------
                                    353 	.area XISEG   (XDATA)
                                    354 	.area HOME    (CODE)
                                    355 	.area GSINIT0 (CODE)
                                    356 	.area GSINIT1 (CODE)
                                    357 	.area GSINIT2 (CODE)
                                    358 	.area GSINIT3 (CODE)
                                    359 	.area GSINIT4 (CODE)
                                    360 	.area GSINIT5 (CODE)
                                    361 	.area GSINIT  (CODE)
                                    362 	.area GSFINAL (CODE)
                                    363 	.area CSEG    (CODE)
                                    364 ;--------------------------------------------------------
                                    365 ; interrupt vector 
                                    366 ;--------------------------------------------------------
                                    367 	.area HOME    (CODE)
      000000                        368 __interrupt_vect:
      000000 02r0ArA3         [24]  369 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  370 	ljmp	_int0_isr
      000006                        371 	.ds	5
      00000B 32               [24]  372 	reti
      00000C                        373 	.ds	7
      000013 02r02r85         [24]  374 	ljmp	_int1_isr
                                    375 ;--------------------------------------------------------
                                    376 ; global & static initialisations
                                    377 ;--------------------------------------------------------
                                    378 	.area HOME    (CODE)
                                    379 	.area GSINIT  (CODE)
                                    380 	.area GSFINAL (CODE)
                                    381 	.area GSINIT  (CODE)
                                    382 	.globl __sdcc_gsinit_startup
                                    383 	.globl __sdcc_program_startup
                                    384 	.globl __start__stack
                                    385 	.globl __mcs51_genXINIT
                                    386 	.globl __mcs51_genXRAMCLEAR
                                    387 	.globl __mcs51_genRAMCLEAR
                                    388 ;	assignment4.c:23: int hr = 0;
      000000 E4               [12]  389 	clr	a
      000001 F5*00            [12]  390 	mov	_hr,a
      000003 F5*01            [12]  391 	mov	(_hr + 1),a
                                    392 ;	assignment4.c:24: int min = 0;
      000005 F5*02            [12]  393 	mov	_min,a
      000007 F5*03            [12]  394 	mov	(_min + 1),a
                                    395 ;	assignment4.c:25: int sec = 0;
      000009 F5*04            [12]  396 	mov	_sec,a
      00000B F5*05            [12]  397 	mov	(_sec + 1),a
                                    398 ;	assignment4.c:26: int mon = 1;
      00000D 75*06 01         [24]  399 	mov	_mon,#0x01
                                    400 ;	1-genFromRTrack replaced	mov	(_mon + 1),#0x00
      000010 F5*07            [12]  401 	mov	(_mon + 1),a
                                    402 ;	assignment4.c:27: int day = 1;
      000012 75*08 01         [24]  403 	mov	_day,#0x01
                                    404 ;	1-genFromRTrack replaced	mov	(_day + 1),#0x00
      000015 F5*09            [12]  405 	mov	(_day + 1),a
                                    406 ;	assignment4.c:28: int yr = 0;
      000017 F5*0A            [12]  407 	mov	_yr,a
      000019 F5*0B            [12]  408 	mov	(_yr + 1),a
                                    409 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  410 	ljmp	__sdcc_program_startup
                                    411 ;--------------------------------------------------------
                                    412 ; Home
                                    413 ;--------------------------------------------------------
                                    414 	.area HOME    (CODE)
                                    415 	.area HOME    (CODE)
      000016                        416 __sdcc_program_startup:
      000016 02r06r81         [24]  417 	ljmp	_main
                                    418 ;	return from main will return to caller
                                    419 ;--------------------------------------------------------
                                    420 ; code
                                    421 ;--------------------------------------------------------
                                    422 	.area CSEG    (CODE)
                                    423 ;------------------------------------------------------------
                                    424 ;Allocation info for local variables in function 'int0_isr'
                                    425 ;------------------------------------------------------------
                                    426 ;button                    Allocated to registers r5 
                                    427 ;temp                      Allocated with name '_int0_isr_temp_1_33'
                                    428 ;t                         Allocated to registers r4 r5 
                                    429 ;i                         Allocated to registers r6 r7 
                                    430 ;------------------------------------------------------------
                                    431 ;	assignment4.c:48: void int0_isr (void) __interrupt (0) __using (1) {
                                    432 ;	-----------------------------------------
                                    433 ;	 function int0_isr
                                    434 ;	-----------------------------------------
      000000                        435 _int0_isr:
                           00000F   436 	ar7 = 0x0F
                           00000E   437 	ar6 = 0x0E
                           00000D   438 	ar5 = 0x0D
                           00000C   439 	ar4 = 0x0C
                           00000B   440 	ar3 = 0x0B
                           00000A   441 	ar2 = 0x0A
                           000009   442 	ar1 = 0x09
                           000008   443 	ar0 = 0x08
      000000 C0*00            [24]  444 	push	bits
      000002 C0 E0            [24]  445 	push	acc
      000004 C0 F0            [24]  446 	push	b
      000006 C0 82            [24]  447 	push	dpl
      000008 C0 83            [24]  448 	push	dph
      00000A C0 07            [24]  449 	push	(0+7)
      00000C C0 06            [24]  450 	push	(0+6)
      00000E C0 05            [24]  451 	push	(0+5)
      000010 C0 04            [24]  452 	push	(0+4)
      000012 C0 03            [24]  453 	push	(0+3)
      000014 C0 02            [24]  454 	push	(0+2)
      000016 C0 01            [24]  455 	push	(0+1)
      000018 C0 00            [24]  456 	push	(0+0)
      00001A C0 D0            [24]  457 	push	psw
      00001C 75 D0 08         [24]  458 	mov	psw,#0x08
                                    459 ;	assignment4.c:50: char temp[3] = {0};
      00001F 75*0E 00         [24]  460 	mov	_int0_isr_temp_1_33,#0x00
      000022 75*0F 00         [24]  461 	mov	(_int0_isr_temp_1_33 + 0x0001),#0x00
      000025 75*10 00         [24]  462 	mov	(_int0_isr_temp_1_33 + 0x0002),#0x00
                                    463 ;	assignment4.c:52: int i = 0;
                                    464 ;	assignment4.c:54: p = 0x00;
      000028 E4               [12]  465 	clr	a
      000029 FE               [12]  466 	mov	r6,a
      00002A FF               [12]  467 	mov	r7,a
      00002B F5*0C            [12]  468 	mov	_p,a
      00002D F5*0D            [12]  469 	mov	(_p + 1),a
                                    470 ;	assignment4.c:55: returnHome();
      00002F C0 0F            [24]  471 	push	ar7
      000031 C0 0E            [24]  472 	push	ar6
      000033 75 D0 00         [24]  473 	mov	psw,#0x00
      000036 12r0Ar71         [24]  474 	lcall	_returnHome
      000039 75 D0 08         [24]  475 	mov	psw,#0x08
      00003C D0 0E            [24]  476 	pop	ar6
      00003E D0 0F            [24]  477 	pop	ar7
                                    478 ;	assignment4.c:57: while(1) {
      000040                        479 00149$:
                                    480 ;	assignment4.c:58: button = getChar();
      000040 C0 0F            [24]  481 	push	ar7
      000042 C0 0E            [24]  482 	push	ar6
      000044 75 D0 00         [24]  483 	mov	psw,#0x00
      000047 12r09rF8         [24]  484 	lcall	_getChar
      00004A 75 D0 08         [24]  485 	mov	psw,#0x08
      00004D AD 82            [24]  486 	mov	r5,dpl
      00004F D0 0E            [24]  487 	pop	ar6
      000051 D0 0F            [24]  488 	pop	ar7
                                    489 ;	assignment4.c:59: if (SW0 == 1 && SW1 == 1) 
      000053 30 B2 06         [24]  490 	jnb	_P3_2,00102$
      000056 30 B3 03         [24]  491 	jnb	_P3_3,00205$
      000059 02r02r68         [24]  492 	ljmp	00151$
      00005C                        493 00205$:
                                    494 ;	assignment4.c:60: break;
      00005C                        495 00102$:
                                    496 ;	assignment4.c:63: if (button == '#') {
      00005C BD 23 56         [24]  497 	cjne	r5,#0x23,00146$
                                    498 ;	assignment4.c:64: p++;
      00005F 05*0C            [12]  499 	inc	_p
      000061 E4               [12]  500 	clr	a
      000062 B5*0C 02         [24]  501 	cjne	a,_p,00208$
      000065 05*0D            [12]  502 	inc	(_p + 1)
      000067                        503 00208$:
                                    504 ;	assignment4.c:65: if (p == 0x02 || p == 0x05) {
      000067 74 02            [12]  505 	mov	a,#0x02
      000069 B5*0C 06         [24]  506 	cjne	a,_p,00209$
      00006C E4               [12]  507 	clr	a
      00006D B5*0D 02         [24]  508 	cjne	a,(_p + 1),00209$
      000070 80 0D            [24]  509 	sjmp	00106$
      000072                        510 00209$:
      000072 74 05            [12]  511 	mov	a,#0x05
      000074 B5*0C 06         [24]  512 	cjne	a,_p,00210$
      000077 E4               [12]  513 	clr	a
      000078 B5*0D 02         [24]  514 	cjne	a,(_p + 1),00210$
      00007B 80 02            [24]  515 	sjmp	00211$
      00007D                        516 00210$:
      00007D 80 0A            [24]  517 	sjmp	00107$
      00007F                        518 00211$:
      00007F                        519 00106$:
                                    520 ;	assignment4.c:66: p++;
      00007F 05*0C            [12]  521 	inc	_p
      000081 E4               [12]  522 	clr	a
      000082 B5*0C 1A         [24]  523 	cjne	a,_p,00108$
      000085 05*0D            [12]  524 	inc	(_p + 1)
      000087 80 16            [24]  525 	sjmp	00108$
      000089                        526 00107$:
                                    527 ;	assignment4.c:67: } else if (p > 0x07) {
      000089 C3               [12]  528 	clr	c
      00008A 74 07            [12]  529 	mov	a,#0x07
      00008C 95*0C            [12]  530 	subb	a,_p
      00008E 74 80            [12]  531 	mov	a,#(0x00 ^ 0x80)
      000090 85*0D F0         [24]  532 	mov	b,(_p + 1)
      000093 63 F0 80         [24]  533 	xrl	b,#0x80
      000096 95 F0            [12]  534 	subb	a,b
      000098 50 05            [24]  535 	jnc	00108$
                                    536 ;	assignment4.c:68: p = 0x00;
      00009A E4               [12]  537 	clr	a
      00009B F5*0C            [12]  538 	mov	_p,a
      00009D F5*0D            [12]  539 	mov	(_p + 1),a
      00009F                        540 00108$:
                                    541 ;	assignment4.c:70: setDdRamAddress(p);
      00009F 85*0C 82         [24]  542 	mov	dpl,_p
      0000A2 C0 0F            [24]  543 	push	ar7
      0000A4 C0 0E            [24]  544 	push	ar6
      0000A6 75 D0 00         [24]  545 	mov	psw,#0x00
      0000A9 12r0Br07         [24]  546 	lcall	_setDdRamAddress
      0000AC 75 D0 08         [24]  547 	mov	psw,#0x08
      0000AF D0 0E            [24]  548 	pop	ar6
      0000B1 D0 0F            [24]  549 	pop	ar7
      0000B3 80 8B            [24]  550 	sjmp	00149$
      0000B5                        551 00146$:
                                    552 ;	assignment4.c:72: else if (button == '*') {
      0000B5 BD 2A 4E         [24]  553 	cjne	r5,#0x2A,00143$
                                    554 ;	assignment4.c:73: p--;
      0000B8 15*0C            [12]  555 	dec	_p
      0000BA 74 FF            [12]  556 	mov	a,#0xFF
      0000BC B5*0C 02         [24]  557 	cjne	a,_p,00216$
      0000BF 15*0D            [12]  558 	dec	(_p + 1)
      0000C1                        559 00216$:
                                    560 ;	assignment4.c:74: if (p == 0x02 || p == 0x05) {
      0000C1 74 02            [12]  561 	mov	a,#0x02
      0000C3 B5*0C 06         [24]  562 	cjne	a,_p,00217$
      0000C6 E4               [12]  563 	clr	a
      0000C7 B5*0D 02         [24]  564 	cjne	a,(_p + 1),00217$
      0000CA 80 0D            [24]  565 	sjmp	00112$
      0000CC                        566 00217$:
      0000CC 74 05            [12]  567 	mov	a,#0x05
      0000CE B5*0C 06         [24]  568 	cjne	a,_p,00218$
      0000D1 E4               [12]  569 	clr	a
      0000D2 B5*0D 02         [24]  570 	cjne	a,(_p + 1),00218$
      0000D5 80 02            [24]  571 	sjmp	00219$
      0000D7                        572 00218$:
      0000D7 80 0B            [24]  573 	sjmp	00113$
      0000D9                        574 00219$:
      0000D9                        575 00112$:
                                    576 ;	assignment4.c:75: p--;
      0000D9 15*0C            [12]  577 	dec	_p
      0000DB 74 FF            [12]  578 	mov	a,#0xFF
      0000DD B5*0C 02         [24]  579 	cjne	a,_p,00220$
      0000E0 15*0D            [12]  580 	dec	(_p + 1)
      0000E2                        581 00220$:
      0000E2 80 0B            [24]  582 	sjmp	00114$
      0000E4                        583 00113$:
                                    584 ;	assignment4.c:76: } else if (p < 0x00) {
      0000E4 E5*0D            [12]  585 	mov	a,(_p + 1)
      0000E6 30 E7 06         [24]  586 	jnb	acc.7,00114$
                                    587 ;	assignment4.c:77: p = 0x07;
      0000E9 75*0C 07         [24]  588 	mov	_p,#0x07
      0000EC 75*0D 00         [24]  589 	mov	(_p + 1),#0x00
      0000EF                        590 00114$:
                                    591 ;	assignment4.c:79: setDdRamAddress(p);
      0000EF 85*0C 82         [24]  592 	mov	dpl,_p
      0000F2 C0 0F            [24]  593 	push	ar7
      0000F4 C0 0E            [24]  594 	push	ar6
      0000F6 75 D0 00         [24]  595 	mov	psw,#0x00
      0000F9 12r0Br07         [24]  596 	lcall	_setDdRamAddress
      0000FC 75 D0 08         [24]  597 	mov	psw,#0x08
      0000FF D0 0E            [24]  598 	pop	ar6
      000101 D0 0F            [24]  599 	pop	ar7
      000103 02r00r40         [24]  600 	ljmp	00149$
      000106                        601 00143$:
                                    602 ;	assignment4.c:82: if ((p == 0x00 && button > '2') || ((p == 0x03 || p == 0x06) && button > '5')) { 
      000106 E5*0C            [12]  603 	mov	a,_p
      000108 45*0D            [12]  604 	orl	a,(_p + 1)
      00010A 70 0F            [24]  605 	jnz	00141$
      00010C C3               [12]  606 	clr	c
      00010D 74 B2            [12]  607 	mov	a,#(0x32 ^ 0x80)
      00010F 8D F0            [24]  608 	mov	b,r5
      000111 63 F0 80         [24]  609 	xrl	b,#0x80
      000114 95 F0            [12]  610 	subb	a,b
      000116 50 03            [24]  611 	jnc	00223$
      000118 02r00r40         [24]  612 	ljmp	00149$
      00011B                        613 00223$:
      00011B                        614 00141$:
      00011B 74 03            [12]  615 	mov	a,#0x03
      00011D B5*0C 06         [24]  616 	cjne	a,_p,00224$
      000120 E4               [12]  617 	clr	a
      000121 B5*0D 02         [24]  618 	cjne	a,(_p + 1),00224$
      000124 80 0D            [24]  619 	sjmp	00140$
      000126                        620 00224$:
      000126 74 06            [12]  621 	mov	a,#0x06
      000128 B5*0C 06         [24]  622 	cjne	a,_p,00225$
      00012B E4               [12]  623 	clr	a
      00012C B5*0D 02         [24]  624 	cjne	a,(_p + 1),00225$
      00012F 80 02            [24]  625 	sjmp	00226$
      000131                        626 00225$:
      000131 80 0F            [24]  627 	sjmp	00136$
      000133                        628 00226$:
      000133                        629 00140$:
      000133 C3               [12]  630 	clr	c
      000134 74 B5            [12]  631 	mov	a,#(0x35 ^ 0x80)
      000136 8D F0            [24]  632 	mov	b,r5
      000138 63 F0 80         [24]  633 	xrl	b,#0x80
      00013B 95 F0            [12]  634 	subb	a,b
      00013D 50 03            [24]  635 	jnc	00227$
      00013F 02r00r40         [24]  636 	ljmp	00149$
      000142                        637 00227$:
      000142                        638 00136$:
                                    639 ;	assignment4.c:86: temp[i++] = button;
      000142 8E 0B            [24]  640 	mov	ar3,r6
      000144 8F 0C            [24]  641 	mov	ar4,r7
      000146 0E               [12]  642 	inc	r6
      000147 BE 00 01         [24]  643 	cjne	r6,#0x00,00228$
      00014A 0F               [12]  644 	inc	r7
      00014B                        645 00228$:
      00014B EB               [12]  646 	mov	a,r3
      00014C 24r0E            [12]  647 	add	a,#_int0_isr_temp_1_33
      00014E F8               [12]  648 	mov	r0,a
      00014F A6 0D            [24]  649 	mov	@r0,ar5
                                    650 ;	assignment4.c:87: sendChar(button);
      000151 8D 82            [24]  651 	mov	dpl,r5
      000153 C0 0F            [24]  652 	push	ar7
      000155 C0 0E            [24]  653 	push	ar6
      000157 75 D0 00         [24]  654 	mov	psw,#0x00
      00015A 12r0Br17         [24]  655 	lcall	_sendChar
      00015D 75 D0 08         [24]  656 	mov	psw,#0x08
      000160 D0 0E            [24]  657 	pop	ar6
      000162 D0 0F            [24]  658 	pop	ar7
                                    659 ;	assignment4.c:88: p = p +1;
      000164 05*0C            [12]  660 	inc	_p
      000166 E4               [12]  661 	clr	a
      000167 B5*0C 02         [24]  662 	cjne	a,_p,00229$
      00016A 05*0D            [12]  663 	inc	(_p + 1)
      00016C                        664 00229$:
                                    665 ;	assignment4.c:89: if (i == 2) {
      00016C BE 02 05         [24]  666 	cjne	r6,#0x02,00230$
      00016F BF 00 02         [24]  667 	cjne	r7,#0x00,00230$
      000172 80 03            [24]  668 	sjmp	00231$
      000174                        669 00230$:
      000174 02r02r51         [24]  670 	ljmp	00134$
      000177                        671 00231$:
                                    672 ;	assignment4.c:90: t = atoi(temp);
      000177 90r00r0E         [24]  673 	mov	dptr,#_int0_isr_temp_1_33
      00017A 75 F0 40         [24]  674 	mov	b,#0x40
      00017D C0 0F            [24]  675 	push	ar7
      00017F C0 0E            [24]  676 	push	ar6
      000181 75 D0 00         [24]  677 	mov	psw,#0x00
      000184 12r00r00         [24]  678 	lcall	_atoi
      000187 75 D0 08         [24]  679 	mov	psw,#0x08
      00018A AC 82            [24]  680 	mov	r4,dpl
      00018C AD 83            [24]  681 	mov	r5,dph
      00018E D0 0E            [24]  682 	pop	ar6
      000190 D0 0F            [24]  683 	pop	ar7
                                    684 ;	assignment4.c:91: if (p == 0x02) {
      000192 74 02            [12]  685 	mov	a,#0x02
      000194 B5*0C 06         [24]  686 	cjne	a,_p,00232$
      000197 E4               [12]  687 	clr	a
      000198 B5*0D 02         [24]  688 	cjne	a,(_p + 1),00232$
      00019B 80 02            [24]  689 	sjmp	00233$
      00019D                        690 00232$:
      00019D 80 33            [24]  691 	sjmp	00131$
      00019F                        692 00233$:
                                    693 ;	assignment4.c:92: if (t > 23) {
      00019F C3               [12]  694 	clr	c
      0001A0 74 17            [12]  695 	mov	a,#0x17
      0001A2 9C               [12]  696 	subb	a,r4
      0001A3 74 80            [12]  697 	mov	a,#(0x00 ^ 0x80)
      0001A5 8D F0            [24]  698 	mov	b,r5
      0001A7 63 F0 80         [24]  699 	xrl	b,#0x80
      0001AA 95 F0            [12]  700 	subb	a,b
      0001AC 50 11            [24]  701 	jnc	00117$
                                    702 ;	assignment4.c:93: p = p -1 ;
      0001AE 15*0C            [12]  703 	dec	_p
      0001B0 74 FF            [12]  704 	mov	a,#0xFF
      0001B2 B5*0C 02         [24]  705 	cjne	a,_p,00235$
      0001B5 15*0D            [12]  706 	dec	(_p + 1)
      0001B7                        707 00235$:
                                    708 ;	assignment4.c:94: i = i -1 ;
      0001B7 1E               [12]  709 	dec	r6
      0001B8 BE FF 01         [24]  710 	cjne	r6,#0xFF,00236$
      0001BB 1F               [12]  711 	dec	r7
      0001BC                        712 00236$:
      0001BC 02r02r51         [24]  713 	ljmp	00134$
      0001BF                        714 00117$:
                                    715 ;	assignment4.c:97: hr = t;
      0001BF 8C*00            [24]  716 	mov	_hr,r4
      0001C1 8D*01            [24]  717 	mov	(_hr + 1),r5
                                    718 ;	assignment4.c:98: i = 0;
      0001C3 7E 00            [12]  719 	mov	r6,#0x00
      0001C5 7F 00            [12]  720 	mov	r7,#0x00
                                    721 ;	assignment4.c:99: p = p +1;
      0001C7 05*0C            [12]  722 	inc	_p
      0001C9 E4               [12]  723 	clr	a
      0001CA B5*0C 02         [24]  724 	cjne	a,_p,00237$
      0001CD 05*0D            [12]  725 	inc	(_p + 1)
      0001CF                        726 00237$:
      0001CF 02r02r51         [24]  727 	ljmp	00134$
      0001D2                        728 00131$:
                                    729 ;	assignment4.c:102: else if (p == 0x05) {
      0001D2 74 05            [12]  730 	mov	a,#0x05
      0001D4 B5*0C 06         [24]  731 	cjne	a,_p,00238$
      0001D7 E4               [12]  732 	clr	a
      0001D8 B5*0D 02         [24]  733 	cjne	a,(_p + 1),00238$
      0001DB 80 02            [24]  734 	sjmp	00239$
      0001DD                        735 00238$:
      0001DD 80 31            [24]  736 	sjmp	00128$
      0001DF                        737 00239$:
                                    738 ;	assignment4.c:103: if (t > 59) {
      0001DF C3               [12]  739 	clr	c
      0001E0 74 3B            [12]  740 	mov	a,#0x3B
      0001E2 9C               [12]  741 	subb	a,r4
      0001E3 74 80            [12]  742 	mov	a,#(0x00 ^ 0x80)
      0001E5 8D F0            [24]  743 	mov	b,r5
      0001E7 63 F0 80         [24]  744 	xrl	b,#0x80
      0001EA 95 F0            [12]  745 	subb	a,b
      0001EC 50 10            [24]  746 	jnc	00120$
                                    747 ;	assignment4.c:104: p = p -1 ;
      0001EE 15*0C            [12]  748 	dec	_p
      0001F0 74 FF            [12]  749 	mov	a,#0xFF
      0001F2 B5*0C 02         [24]  750 	cjne	a,_p,00241$
      0001F5 15*0D            [12]  751 	dec	(_p + 1)
      0001F7                        752 00241$:
                                    753 ;	assignment4.c:105: i = i +1;
      0001F7 0E               [12]  754 	inc	r6
      0001F8 BE 00 56         [24]  755 	cjne	r6,#0x00,00134$
      0001FB 0F               [12]  756 	inc	r7
      0001FC 80 53            [24]  757 	sjmp	00134$
      0001FE                        758 00120$:
                                    759 ;	assignment4.c:108: min = t;
      0001FE 8C*02            [24]  760 	mov	_min,r4
      000200 8D*03            [24]  761 	mov	(_min + 1),r5
                                    762 ;	assignment4.c:109: i = 0;
      000202 7E 00            [12]  763 	mov	r6,#0x00
      000204 7F 00            [12]  764 	mov	r7,#0x00
                                    765 ;	assignment4.c:110: p = p +1;
      000206 05*0C            [12]  766 	inc	_p
      000208 E4               [12]  767 	clr	a
      000209 B5*0C 45         [24]  768 	cjne	a,_p,00134$
      00020C 05*0D            [12]  769 	inc	(_p + 1)
      00020E 80 41            [24]  770 	sjmp	00134$
      000210                        771 00128$:
                                    772 ;	assignment4.c:113: else if (p == 0x08) {
      000210 74 08            [12]  773 	mov	a,#0x08
      000212 B5*0C 06         [24]  774 	cjne	a,_p,00244$
      000215 E4               [12]  775 	clr	a
      000216 B5*0D 02         [24]  776 	cjne	a,(_p + 1),00244$
      000219 80 02            [24]  777 	sjmp	00245$
      00021B                        778 00244$:
      00021B 80 34            [24]  779 	sjmp	00134$
      00021D                        780 00245$:
                                    781 ;	assignment4.c:114: if (t > 59) {
      00021D C3               [12]  782 	clr	c
      00021E 74 3B            [12]  783 	mov	a,#0x3B
      000220 9C               [12]  784 	subb	a,r4
      000221 74 80            [12]  785 	mov	a,#(0x00 ^ 0x80)
      000223 8D F0            [24]  786 	mov	b,r5
      000225 63 F0 80         [24]  787 	xrl	b,#0x80
      000228 95 F0            [12]  788 	subb	a,b
      00022A 50 10            [24]  789 	jnc	00123$
                                    790 ;	assignment4.c:115: p = p - 1;
      00022C 15*0C            [12]  791 	dec	_p
      00022E 74 FF            [12]  792 	mov	a,#0xFF
      000230 B5*0C 02         [24]  793 	cjne	a,_p,00247$
      000233 15*0D            [12]  794 	dec	(_p + 1)
      000235                        795 00247$:
                                    796 ;	assignment4.c:116: i = i -1;
      000235 1E               [12]  797 	dec	r6
      000236 BE FF 01         [24]  798 	cjne	r6,#0xFF,00248$
      000239 1F               [12]  799 	dec	r7
      00023A                        800 00248$:
      00023A 80 10            [24]  801 	sjmp	00124$
      00023C                        802 00123$:
                                    803 ;	assignment4.c:119: sec = t;
      00023C 8C*04            [24]  804 	mov	_sec,r4
      00023E 8D*05            [24]  805 	mov	(_sec + 1),r5
                                    806 ;	assignment4.c:120: i = 0;
      000240 7E 00            [12]  807 	mov	r6,#0x00
      000242 7F 00            [12]  808 	mov	r7,#0x00
                                    809 ;	assignment4.c:121: p = p + 1;
      000244 05*0C            [12]  810 	inc	_p
      000246 E4               [12]  811 	clr	a
      000247 B5*0C 02         [24]  812 	cjne	a,_p,00249$
      00024A 05*0D            [12]  813 	inc	(_p + 1)
      00024C                        814 00249$:
      00024C                        815 00124$:
                                    816 ;	assignment4.c:123: p = 0x00;
      00024C E4               [12]  817 	clr	a
      00024D F5*0C            [12]  818 	mov	_p,a
      00024F F5*0D            [12]  819 	mov	(_p + 1),a
      000251                        820 00134$:
                                    821 ;	assignment4.c:126: setDdRamAddress(p);
      000251 85*0C 82         [24]  822 	mov	dpl,_p
      000254 C0 0F            [24]  823 	push	ar7
      000256 C0 0E            [24]  824 	push	ar6
      000258 75 D0 00         [24]  825 	mov	psw,#0x00
      00025B 12r0Br07         [24]  826 	lcall	_setDdRamAddress
      00025E 75 D0 08         [24]  827 	mov	psw,#0x08
      000261 D0 0E            [24]  828 	pop	ar6
      000263 D0 0F            [24]  829 	pop	ar7
      000265 02r00r40         [24]  830 	ljmp	00149$
      000268                        831 00151$:
      000268 D0 D0            [24]  832 	pop	psw
      00026A D0 00            [24]  833 	pop	(0+0)
      00026C D0 01            [24]  834 	pop	(0+1)
      00026E D0 02            [24]  835 	pop	(0+2)
      000270 D0 03            [24]  836 	pop	(0+3)
      000272 D0 04            [24]  837 	pop	(0+4)
      000274 D0 05            [24]  838 	pop	(0+5)
      000276 D0 06            [24]  839 	pop	(0+6)
      000278 D0 07            [24]  840 	pop	(0+7)
      00027A D0 83            [24]  841 	pop	dph
      00027C D0 82            [24]  842 	pop	dpl
      00027E D0 F0            [24]  843 	pop	b
      000280 D0 E0            [24]  844 	pop	acc
      000282 D0*00            [24]  845 	pop	bits
      000284 32               [24]  846 	reti
                                    847 ;------------------------------------------------------------
                                    848 ;Allocation info for local variables in function 'int1_isr'
                                    849 ;------------------------------------------------------------
                                    850 ;button                    Allocated to registers r5 
                                    851 ;temp                      Allocated with name '_int1_isr_temp_1_55'
                                    852 ;t                         Allocated to registers r4 r5 
                                    853 ;i                         Allocated to registers r6 r7 
                                    854 ;------------------------------------------------------------
                                    855 ;	assignment4.c:132: void int1_isr (void) __interrupt (2) __using (1) {
                                    856 ;	-----------------------------------------
                                    857 ;	 function int1_isr
                                    858 ;	-----------------------------------------
      000285                        859 _int1_isr:
      000285 C0*00            [24]  860 	push	bits
      000287 C0 E0            [24]  861 	push	acc
      000289 C0 F0            [24]  862 	push	b
      00028B C0 82            [24]  863 	push	dpl
      00028D C0 83            [24]  864 	push	dph
      00028F C0 07            [24]  865 	push	(0+7)
      000291 C0 06            [24]  866 	push	(0+6)
      000293 C0 05            [24]  867 	push	(0+5)
      000295 C0 04            [24]  868 	push	(0+4)
      000297 C0 03            [24]  869 	push	(0+3)
      000299 C0 02            [24]  870 	push	(0+2)
      00029B C0 01            [24]  871 	push	(0+1)
      00029D C0 00            [24]  872 	push	(0+0)
      00029F C0 D0            [24]  873 	push	psw
      0002A1 75 D0 08         [24]  874 	mov	psw,#0x08
                                    875 ;	assignment4.c:134: char temp[3] = {0};
      0002A4 75*11 00         [24]  876 	mov	_int1_isr_temp_1_55,#0x00
      0002A7 75*12 00         [24]  877 	mov	(_int1_isr_temp_1_55 + 0x0001),#0x00
      0002AA 75*13 00         [24]  878 	mov	(_int1_isr_temp_1_55 + 0x0002),#0x00
                                    879 ;	assignment4.c:136: int i = 0; 
      0002AD 7E 00            [12]  880 	mov	r6,#0x00
      0002AF 7F 00            [12]  881 	mov	r7,#0x00
                                    882 ;	assignment4.c:137: p = 0x40;
      0002B1 75*0C 40         [24]  883 	mov	_p,#0x40
                                    884 ;	1-genFromRTrack replaced	mov	(_p + 1),#0x00
      0002B4 8F*0D            [24]  885 	mov	(_p + 1),r7
                                    886 ;	assignment4.c:138: setDdRamAddress(p);
      0002B6 75 82 40         [24]  887 	mov	dpl,#0x40
      0002B9 C0 0F            [24]  888 	push	ar7
      0002BB C0 0E            [24]  889 	push	ar6
      0002BD 75 D0 00         [24]  890 	mov	psw,#0x00
      0002C0 12r0Br07         [24]  891 	lcall	_setDdRamAddress
      0002C3 75 D0 08         [24]  892 	mov	psw,#0x08
      0002C6 D0 0E            [24]  893 	pop	ar6
      0002C8 D0 0F            [24]  894 	pop	ar7
                                    895 ;	assignment4.c:139: while(1) {
      0002CA                        896 00169$:
                                    897 ;	assignment4.c:140: button = getChar();
      0002CA C0 0F            [24]  898 	push	ar7
      0002CC C0 0E            [24]  899 	push	ar6
      0002CE 75 D0 00         [24]  900 	mov	psw,#0x00
      0002D1 12r09rF8         [24]  901 	lcall	_getChar
      0002D4 75 D0 08         [24]  902 	mov	psw,#0x08
      0002D7 AD 82            [24]  903 	mov	r5,dpl
      0002D9 D0 0E            [24]  904 	pop	ar6
      0002DB D0 0F            [24]  905 	pop	ar7
                                    906 ;	assignment4.c:141: if(SW0 == 1 && SW1 == 1) 
      0002DD 30 B2 06         [24]  907 	jnb	_P3_2,00102$
      0002E0 30 B3 03         [24]  908 	jnb	_P3_3,00276$
      0002E3 02r06r64         [24]  909 	ljmp	00171$
      0002E6                        910 00276$:
                                    911 ;	assignment4.c:142: break;
      0002E6                        912 00102$:
                                    913 ;	assignment4.c:144: if (button == '*') {
      0002E6 BD 2A 55         [24]  914 	cjne	r5,#0x2A,00166$
                                    915 ;	assignment4.c:145: p--;
      0002E9 15*0C            [12]  916 	dec	_p
      0002EB 74 FF            [12]  917 	mov	a,#0xFF
      0002ED B5*0C 02         [24]  918 	cjne	a,_p,00279$
      0002F0 15*0D            [12]  919 	dec	(_p + 1)
      0002F2                        920 00279$:
                                    921 ;	assignment4.c:146: if (p == 0x42 || p == 0x45) {
      0002F2 74 42            [12]  922 	mov	a,#0x42
      0002F4 B5*0C 06         [24]  923 	cjne	a,_p,00280$
      0002F7 E4               [12]  924 	clr	a
      0002F8 B5*0D 02         [24]  925 	cjne	a,(_p + 1),00280$
      0002FB 80 0D            [24]  926 	sjmp	00106$
      0002FD                        927 00280$:
      0002FD 74 45            [12]  928 	mov	a,#0x45
      0002FF B5*0C 06         [24]  929 	cjne	a,_p,00281$
      000302 E4               [12]  930 	clr	a
      000303 B5*0D 02         [24]  931 	cjne	a,(_p + 1),00281$
      000306 80 02            [24]  932 	sjmp	00282$
      000308                        933 00281$:
      000308 80 0B            [24]  934 	sjmp	00107$
      00030A                        935 00282$:
      00030A                        936 00106$:
                                    937 ;	assignment4.c:147: p--;
      00030A 15*0C            [12]  938 	dec	_p
      00030C 74 FF            [12]  939 	mov	a,#0xFF
      00030E B5*0C 02         [24]  940 	cjne	a,_p,00283$
      000311 15*0D            [12]  941 	dec	(_p + 1)
      000313                        942 00283$:
      000313 80 13            [24]  943 	sjmp	00108$
      000315                        944 00107$:
                                    945 ;	assignment4.c:148: } else if(p < 0x40) {
      000315 C3               [12]  946 	clr	c
      000316 E5*0C            [12]  947 	mov	a,_p
      000318 94 40            [12]  948 	subb	a,#0x40
      00031A E5*0D            [12]  949 	mov	a,(_p + 1)
      00031C 64 80            [12]  950 	xrl	a,#0x80
      00031E 94 80            [12]  951 	subb	a,#0x80
      000320 50 06            [24]  952 	jnc	00108$
                                    953 ;	assignment4.c:149: p = 0x47;
      000322 75*0C 47         [24]  954 	mov	_p,#0x47
      000325 75*0D 00         [24]  955 	mov	(_p + 1),#0x00
      000328                        956 00108$:
                                    957 ;	assignment4.c:151: setDdRamAddress(p);
      000328 85*0C 82         [24]  958 	mov	dpl,_p
      00032B C0 0F            [24]  959 	push	ar7
      00032D C0 0E            [24]  960 	push	ar6
      00032F 75 D0 00         [24]  961 	mov	psw,#0x00
      000332 12r0Br07         [24]  962 	lcall	_setDdRamAddress
      000335 75 D0 08         [24]  963 	mov	psw,#0x08
      000338 D0 0E            [24]  964 	pop	ar6
      00033A D0 0F            [24]  965 	pop	ar7
      00033C 80 8C            [24]  966 	sjmp	00169$
      00033E                        967 00166$:
                                    968 ;	assignment4.c:152: } else if (button == '#') {
      00033E BD 23 58         [24]  969 	cjne	r5,#0x23,00163$
                                    970 ;	assignment4.c:153: p++;
      000341 05*0C            [12]  971 	inc	_p
      000343 E4               [12]  972 	clr	a
      000344 B5*0C 02         [24]  973 	cjne	a,_p,00287$
      000347 05*0D            [12]  974 	inc	(_p + 1)
      000349                        975 00287$:
                                    976 ;	assignment4.c:154: if (p == 0x42 || p == 0x45) {
      000349 74 42            [12]  977 	mov	a,#0x42
      00034B B5*0C 06         [24]  978 	cjne	a,_p,00288$
      00034E E4               [12]  979 	clr	a
      00034F B5*0D 02         [24]  980 	cjne	a,(_p + 1),00288$
      000352 80 0D            [24]  981 	sjmp	00112$
      000354                        982 00288$:
      000354 74 45            [12]  983 	mov	a,#0x45
      000356 B5*0C 06         [24]  984 	cjne	a,_p,00289$
      000359 E4               [12]  985 	clr	a
      00035A B5*0D 02         [24]  986 	cjne	a,(_p + 1),00289$
      00035D 80 02            [24]  987 	sjmp	00290$
      00035F                        988 00289$:
      00035F 80 0A            [24]  989 	sjmp	00113$
      000361                        990 00290$:
      000361                        991 00112$:
                                    992 ;	assignment4.c:155: p++;
      000361 05*0C            [12]  993 	inc	_p
      000363 E4               [12]  994 	clr	a
      000364 B5*0C 1B         [24]  995 	cjne	a,_p,00114$
      000367 05*0D            [12]  996 	inc	(_p + 1)
      000369 80 17            [24]  997 	sjmp	00114$
      00036B                        998 00113$:
                                    999 ;	assignment4.c:156: } else if (p > 0x47) {
      00036B C3               [12] 1000 	clr	c
      00036C 74 47            [12] 1001 	mov	a,#0x47
      00036E 95*0C            [12] 1002 	subb	a,_p
      000370 74 80            [12] 1003 	mov	a,#(0x00 ^ 0x80)
      000372 85*0D F0         [24] 1004 	mov	b,(_p + 1)
      000375 63 F0 80         [24] 1005 	xrl	b,#0x80
      000378 95 F0            [12] 1006 	subb	a,b
      00037A 50 06            [24] 1007 	jnc	00114$
                                   1008 ;	assignment4.c:157: p = 0x40;
      00037C 75*0C 40         [24] 1009 	mov	_p,#0x40
      00037F 75*0D 00         [24] 1010 	mov	(_p + 1),#0x00
      000382                       1011 00114$:
                                   1012 ;	assignment4.c:159: setDdRamAddress(p);
      000382 85*0C 82         [24] 1013 	mov	dpl,_p
      000385 C0 0F            [24] 1014 	push	ar7
      000387 C0 0E            [24] 1015 	push	ar6
      000389 75 D0 00         [24] 1016 	mov	psw,#0x00
      00038C 12r0Br07         [24] 1017 	lcall	_setDdRamAddress
      00038F 75 D0 08         [24] 1018 	mov	psw,#0x08
      000392 D0 0E            [24] 1019 	pop	ar6
      000394 D0 0F            [24] 1020 	pop	ar7
      000396 02r02rCA         [24] 1021 	ljmp	00169$
      000399                       1022 00163$:
                                   1023 ;	assignment4.c:161: if((p == 0x40 && button > '3') || (p == 0x43 && button > '2')) { // day can't enter 40s, mon can't enter 20s
      000399 74 40            [12] 1024 	mov	a,#0x40
      00039B B5*0C 06         [24] 1025 	cjne	a,_p,00293$
      00039E E4               [12] 1026 	clr	a
      00039F B5*0D 02         [24] 1027 	cjne	a,(_p + 1),00293$
      0003A2 80 02            [24] 1028 	sjmp	00294$
      0003A4                       1029 00293$:
      0003A4 80 0F            [24] 1030 	sjmp	00161$
      0003A6                       1031 00294$:
      0003A6 C3               [12] 1032 	clr	c
      0003A7 74 B3            [12] 1033 	mov	a,#(0x33 ^ 0x80)
      0003A9 8D F0            [24] 1034 	mov	b,r5
      0003AB 63 F0 80         [24] 1035 	xrl	b,#0x80
      0003AE 95 F0            [12] 1036 	subb	a,b
      0003B0 50 03            [24] 1037 	jnc	00295$
      0003B2 02r02rCA         [24] 1038 	ljmp	00169$
      0003B5                       1039 00295$:
      0003B5                       1040 00161$:
      0003B5 74 43            [12] 1041 	mov	a,#0x43
      0003B7 B5*0C 06         [24] 1042 	cjne	a,_p,00296$
      0003BA E4               [12] 1043 	clr	a
      0003BB B5*0D 02         [24] 1044 	cjne	a,(_p + 1),00296$
      0003BE 80 02            [24] 1045 	sjmp	00297$
      0003C0                       1046 00296$:
      0003C0 80 0F            [24] 1047 	sjmp	00157$
      0003C2                       1048 00297$:
      0003C2 C3               [12] 1049 	clr	c
      0003C3 74 B2            [12] 1050 	mov	a,#(0x32 ^ 0x80)
      0003C5 8D F0            [24] 1051 	mov	b,r5
      0003C7 63 F0 80         [24] 1052 	xrl	b,#0x80
      0003CA 95 F0            [12] 1053 	subb	a,b
      0003CC 50 03            [24] 1054 	jnc	00298$
      0003CE 02r02rCA         [24] 1055 	ljmp	00169$
      0003D1                       1056 00298$:
      0003D1                       1057 00157$:
                                   1058 ;	assignment4.c:164: temp[i++] = button;
      0003D1 8E 0B            [24] 1059 	mov	ar3,r6
      0003D3 8F 0C            [24] 1060 	mov	ar4,r7
      0003D5 0E               [12] 1061 	inc	r6
      0003D6 BE 00 01         [24] 1062 	cjne	r6,#0x00,00299$
      0003D9 0F               [12] 1063 	inc	r7
      0003DA                       1064 00299$:
      0003DA EB               [12] 1065 	mov	a,r3
      0003DB 24r11            [12] 1066 	add	a,#_int1_isr_temp_1_55
      0003DD F8               [12] 1067 	mov	r0,a
      0003DE A6 0D            [24] 1068 	mov	@r0,ar5
                                   1069 ;	assignment4.c:165: sendChar(button);
      0003E0 8D 82            [24] 1070 	mov	dpl,r5
      0003E2 C0 0F            [24] 1071 	push	ar7
      0003E4 C0 0E            [24] 1072 	push	ar6
      0003E6 75 D0 00         [24] 1073 	mov	psw,#0x00
      0003E9 12r0Br17         [24] 1074 	lcall	_sendChar
      0003EC 75 D0 08         [24] 1075 	mov	psw,#0x08
      0003EF D0 0E            [24] 1076 	pop	ar6
      0003F1 D0 0F            [24] 1077 	pop	ar7
                                   1078 ;	assignment4.c:166: p++;
      0003F3 05*0C            [12] 1079 	inc	_p
      0003F5 E4               [12] 1080 	clr	a
      0003F6 B5*0C 02         [24] 1081 	cjne	a,_p,00300$
      0003F9 05*0D            [12] 1082 	inc	(_p + 1)
      0003FB                       1083 00300$:
                                   1084 ;	assignment4.c:167: if (i == 2) {
      0003FB BE 02 05         [24] 1085 	cjne	r6,#0x02,00301$
      0003FE BF 00 02         [24] 1086 	cjne	r7,#0x00,00301$
      000401 80 03            [24] 1087 	sjmp	00302$
      000403                       1088 00301$:
      000403 02r06r4D         [24] 1089 	ljmp	00155$
      000406                       1090 00302$:
                                   1091 ;	assignment4.c:168: t = atoi(temp);
      000406 90r00r11         [24] 1092 	mov	dptr,#_int1_isr_temp_1_55
      000409 75 F0 40         [24] 1093 	mov	b,#0x40
      00040C C0 0F            [24] 1094 	push	ar7
      00040E C0 0E            [24] 1095 	push	ar6
      000410 75 D0 00         [24] 1096 	mov	psw,#0x00
      000413 12r00r00         [24] 1097 	lcall	_atoi
      000416 75 D0 08         [24] 1098 	mov	psw,#0x08
      000419 AC 82            [24] 1099 	mov	r4,dpl
      00041B AD 83            [24] 1100 	mov	r5,dph
      00041D D0 0E            [24] 1101 	pop	ar6
      00041F D0 0F            [24] 1102 	pop	ar7
                                   1103 ;	assignment4.c:169: if (p == 0x42) {
      000421 74 42            [12] 1104 	mov	a,#0x42
      000423 B5*0C 06         [24] 1105 	cjne	a,_p,00303$
      000426 E4               [12] 1106 	clr	a
      000427 B5*0D 02         [24] 1107 	cjne	a,(_p + 1),00303$
      00042A 80 03            [24] 1108 	sjmp	00304$
      00042C                       1109 00303$:
      00042C 02r05rEF         [24] 1110 	ljmp	00152$
      00042F                       1111 00304$:
                                   1112 ;	assignment4.c:170: if ((t > 31) && (((mon < 8) && (mon % 2 == 0)) && ((mon > 7) && (mon % 2 == 1) && (mon != 2)))) {	
      00042F C3               [12] 1113 	clr	c
      000430 74 1F            [12] 1114 	mov	a,#0x1F
      000432 9C               [12] 1115 	subb	a,r4
      000433 74 80            [12] 1116 	mov	a,#(0x00 ^ 0x80)
      000435 8D F0            [24] 1117 	mov	b,r5
      000437 63 F0 80         [24] 1118 	xrl	b,#0x80
      00043A 95 F0            [12] 1119 	subb	a,b
      00043C 50 6D            [24] 1120 	jnc	00135$
      00043E C3               [12] 1121 	clr	c
      00043F E5*06            [12] 1122 	mov	a,_mon
      000441 94 08            [12] 1123 	subb	a,#0x08
      000443 E5*07            [12] 1124 	mov	a,(_mon + 1)
      000445 64 80            [12] 1125 	xrl	a,#0x80
      000447 94 80            [12] 1126 	subb	a,#0x80
      000449 50 60            [24] 1127 	jnc	00135$
      00044B 75*00 02         [24] 1128 	mov	__modsint_PARM_2,#0x02
      00044E 75*01 00         [24] 1129 	mov	(__modsint_PARM_2 + 1),#0x00
      000451 85*06 82         [24] 1130 	mov	dpl,_mon
      000454 85*07 83         [24] 1131 	mov	dph,(_mon + 1)
      000457 C0 0F            [24] 1132 	push	ar7
      000459 C0 0E            [24] 1133 	push	ar6
      00045B C0 0D            [24] 1134 	push	ar5
      00045D C0 0C            [24] 1135 	push	ar4
      00045F 75 D0 00         [24] 1136 	mov	psw,#0x00
      000462 12r00r00         [24] 1137 	lcall	__modsint
      000465 75 D0 08         [24] 1138 	mov	psw,#0x08
      000468 AA 82            [24] 1139 	mov	r2,dpl
      00046A AB 83            [24] 1140 	mov	r3,dph
      00046C D0 0C            [24] 1141 	pop	ar4
      00046E D0 0D            [24] 1142 	pop	ar5
      000470 D0 0E            [24] 1143 	pop	ar6
      000472 D0 0F            [24] 1144 	pop	ar7
      000474 EA               [12] 1145 	mov	a,r2
      000475 4B               [12] 1146 	orl	a,r3
      000476 70 33            [24] 1147 	jnz	00135$
      000478 C3               [12] 1148 	clr	c
      000479 74 07            [12] 1149 	mov	a,#0x07
      00047B 95*06            [12] 1150 	subb	a,_mon
      00047D 74 80            [12] 1151 	mov	a,#(0x00 ^ 0x80)
      00047F 85*07 F0         [24] 1152 	mov	b,(_mon + 1)
      000482 63 F0 80         [24] 1153 	xrl	b,#0x80
      000485 95 F0            [12] 1154 	subb	a,b
      000487 50 22            [24] 1155 	jnc	00135$
      000489 BA 01 1F         [24] 1156 	cjne	r2,#0x01,00135$
      00048C BB 00 1C         [24] 1157 	cjne	r3,#0x00,00135$
      00048F 74 02            [12] 1158 	mov	a,#0x02
      000491 B5*06 06         [24] 1159 	cjne	a,_mon,00311$
      000494 E4               [12] 1160 	clr	a
      000495 B5*07 02         [24] 1161 	cjne	a,(_mon + 1),00311$
      000498 80 11            [24] 1162 	sjmp	00135$
      00049A                       1163 00311$:
                                   1164 ;	assignment4.c:171: p--;
      00049A 15*0C            [12] 1165 	dec	_p
      00049C 74 FF            [12] 1166 	mov	a,#0xFF
      00049E B5*0C 02         [24] 1167 	cjne	a,_p,00312$
      0004A1 15*0D            [12] 1168 	dec	(_p + 1)
      0004A3                       1169 00312$:
                                   1170 ;	assignment4.c:172: i--;
      0004A3 1E               [12] 1171 	dec	r6
      0004A4 BE FF 01         [24] 1172 	cjne	r6,#0xFF,00313$
      0004A7 1F               [12] 1173 	dec	r7
      0004A8                       1174 00313$:
      0004A8 02r06r4D         [24] 1175 	ljmp	00155$
      0004AB                       1176 00135$:
                                   1177 ;	assignment4.c:173: } else if ((t > 29) && (mon == 2) && (yr % 4 == 0)) {
      0004AB C3               [12] 1178 	clr	c
      0004AC 74 1D            [12] 1179 	mov	a,#0x1D
      0004AE 9C               [12] 1180 	subb	a,r4
      0004AF 74 80            [12] 1181 	mov	a,#(0x00 ^ 0x80)
      0004B1 8D F0            [24] 1182 	mov	b,r5
      0004B3 63 F0 80         [24] 1183 	xrl	b,#0x80
      0004B6 95 F0            [12] 1184 	subb	a,b
      0004B8 50 4C            [24] 1185 	jnc	00130$
      0004BA 74 02            [12] 1186 	mov	a,#0x02
      0004BC B5*06 06         [24] 1187 	cjne	a,_mon,00315$
      0004BF E4               [12] 1188 	clr	a
      0004C0 B5*07 02         [24] 1189 	cjne	a,(_mon + 1),00315$
      0004C3 80 02            [24] 1190 	sjmp	00316$
      0004C5                       1191 00315$:
      0004C5 80 3F            [24] 1192 	sjmp	00130$
      0004C7                       1193 00316$:
      0004C7 75*00 04         [24] 1194 	mov	__modsint_PARM_2,#0x04
      0004CA 75*01 00         [24] 1195 	mov	(__modsint_PARM_2 + 1),#0x00
      0004CD 85*0A 82         [24] 1196 	mov	dpl,_yr
      0004D0 85*0B 83         [24] 1197 	mov	dph,(_yr + 1)
      0004D3 C0 0F            [24] 1198 	push	ar7
      0004D5 C0 0E            [24] 1199 	push	ar6
      0004D7 C0 0D            [24] 1200 	push	ar5
      0004D9 C0 0C            [24] 1201 	push	ar4
      0004DB 75 D0 00         [24] 1202 	mov	psw,#0x00
      0004DE 12r00r00         [24] 1203 	lcall	__modsint
      0004E1 75 D0 08         [24] 1204 	mov	psw,#0x08
      0004E4 E5 82            [12] 1205 	mov	a,dpl
      0004E6 85 83 F0         [24] 1206 	mov	b,dph
      0004E9 D0 0C            [24] 1207 	pop	ar4
      0004EB D0 0D            [24] 1208 	pop	ar5
      0004ED D0 0E            [24] 1209 	pop	ar6
      0004EF D0 0F            [24] 1210 	pop	ar7
      0004F1 45 F0            [12] 1211 	orl	a,b
      0004F3 70 11            [24] 1212 	jnz	00130$
                                   1213 ;	assignment4.c:174: p--;
      0004F5 15*0C            [12] 1214 	dec	_p
      0004F7 74 FF            [12] 1215 	mov	a,#0xFF
      0004F9 B5*0C 02         [24] 1216 	cjne	a,_p,00318$
      0004FC 15*0D            [12] 1217 	dec	(_p + 1)
      0004FE                       1218 00318$:
                                   1219 ;	assignment4.c:175: i--;
      0004FE 1E               [12] 1220 	dec	r6
      0004FF BE FF 01         [24] 1221 	cjne	r6,#0xFF,00319$
      000502 1F               [12] 1222 	dec	r7
      000503                       1223 00319$:
      000503 02r06r4D         [24] 1224 	ljmp	00155$
      000506                       1225 00130$:
                                   1226 ;	assignment4.c:176: } else if ((t > 28) && (mon == 2) && (yr % 4 == 1)) {
      000506 C3               [12] 1227 	clr	c
      000507 74 1C            [12] 1228 	mov	a,#0x1C
      000509 9C               [12] 1229 	subb	a,r4
      00050A 74 80            [12] 1230 	mov	a,#(0x00 ^ 0x80)
      00050C 8D F0            [24] 1231 	mov	b,r5
      00050E 63 F0 80         [24] 1232 	xrl	b,#0x80
      000511 95 F0            [12] 1233 	subb	a,b
      000513 50 4D            [24] 1234 	jnc	00125$
      000515 74 02            [12] 1235 	mov	a,#0x02
      000517 B5*06 06         [24] 1236 	cjne	a,_mon,00321$
      00051A E4               [12] 1237 	clr	a
      00051B B5*07 02         [24] 1238 	cjne	a,(_mon + 1),00321$
      00051E 80 02            [24] 1239 	sjmp	00322$
      000520                       1240 00321$:
      000520 80 40            [24] 1241 	sjmp	00125$
      000522                       1242 00322$:
      000522 75*00 04         [24] 1243 	mov	__modsint_PARM_2,#0x04
      000525 75*01 00         [24] 1244 	mov	(__modsint_PARM_2 + 1),#0x00
      000528 85*0A 82         [24] 1245 	mov	dpl,_yr
      00052B 85*0B 83         [24] 1246 	mov	dph,(_yr + 1)
      00052E C0 0F            [24] 1247 	push	ar7
      000530 C0 0E            [24] 1248 	push	ar6
      000532 C0 0D            [24] 1249 	push	ar5
      000534 C0 0C            [24] 1250 	push	ar4
      000536 75 D0 00         [24] 1251 	mov	psw,#0x00
      000539 12r00r00         [24] 1252 	lcall	__modsint
      00053C 75 D0 08         [24] 1253 	mov	psw,#0x08
      00053F AA 82            [24] 1254 	mov	r2,dpl
      000541 AB 83            [24] 1255 	mov	r3,dph
      000543 D0 0C            [24] 1256 	pop	ar4
      000545 D0 0D            [24] 1257 	pop	ar5
      000547 D0 0E            [24] 1258 	pop	ar6
      000549 D0 0F            [24] 1259 	pop	ar7
      00054B BA 01 14         [24] 1260 	cjne	r2,#0x01,00125$
      00054E BB 00 11         [24] 1261 	cjne	r3,#0x00,00125$
                                   1262 ;	assignment4.c:177: p--;
      000551 15*0C            [12] 1263 	dec	_p
      000553 74 FF            [12] 1264 	mov	a,#0xFF
      000555 B5*0C 02         [24] 1265 	cjne	a,_p,00325$
      000558 15*0D            [12] 1266 	dec	(_p + 1)
      00055A                       1267 00325$:
                                   1268 ;	assignment4.c:178: i--;
      00055A 1E               [12] 1269 	dec	r6
      00055B BE FF 01         [24] 1270 	cjne	r6,#0xFF,00326$
      00055E 1F               [12] 1271 	dec	r7
      00055F                       1272 00326$:
      00055F 02r06r4D         [24] 1273 	ljmp	00155$
      000562                       1274 00125$:
                                   1275 ;	assignment4.c:179: } else if ((t > 30) && (mon != 2) && (((mon < 8) && (mon % 2 == 0)) && ((mon > 7) && (mon % 2 == 1)))) {
      000562 C3               [12] 1276 	clr	c
      000563 74 1E            [12] 1277 	mov	a,#0x1E
      000565 9C               [12] 1278 	subb	a,r4
      000566 74 80            [12] 1279 	mov	a,#(0x00 ^ 0x80)
      000568 8D F0            [24] 1280 	mov	b,r5
      00056A 63 F0 80         [24] 1281 	xrl	b,#0x80
      00056D 95 F0            [12] 1282 	subb	a,b
      00056F 50 6C            [24] 1283 	jnc	00117$
      000571 74 02            [12] 1284 	mov	a,#0x02
      000573 B5*06 06         [24] 1285 	cjne	a,_mon,00328$
      000576 E4               [12] 1286 	clr	a
      000577 B5*07 02         [24] 1287 	cjne	a,(_mon + 1),00328$
      00057A 80 61            [24] 1288 	sjmp	00117$
      00057C                       1289 00328$:
      00057C C3               [12] 1290 	clr	c
      00057D E5*06            [12] 1291 	mov	a,_mon
      00057F 94 08            [12] 1292 	subb	a,#0x08
      000581 E5*07            [12] 1293 	mov	a,(_mon + 1)
      000583 64 80            [12] 1294 	xrl	a,#0x80
      000585 94 80            [12] 1295 	subb	a,#0x80
      000587 50 54            [24] 1296 	jnc	00117$
      000589 75*00 02         [24] 1297 	mov	__modsint_PARM_2,#0x02
      00058C 75*01 00         [24] 1298 	mov	(__modsint_PARM_2 + 1),#0x00
      00058F 85*06 82         [24] 1299 	mov	dpl,_mon
      000592 85*07 83         [24] 1300 	mov	dph,(_mon + 1)
      000595 C0 0F            [24] 1301 	push	ar7
      000597 C0 0E            [24] 1302 	push	ar6
      000599 C0 0D            [24] 1303 	push	ar5
      00059B C0 0C            [24] 1304 	push	ar4
      00059D 75 D0 00         [24] 1305 	mov	psw,#0x00
      0005A0 12r00r00         [24] 1306 	lcall	__modsint
      0005A3 75 D0 08         [24] 1307 	mov	psw,#0x08
      0005A6 AA 82            [24] 1308 	mov	r2,dpl
      0005A8 AB 83            [24] 1309 	mov	r3,dph
      0005AA D0 0C            [24] 1310 	pop	ar4
      0005AC D0 0D            [24] 1311 	pop	ar5
      0005AE D0 0E            [24] 1312 	pop	ar6
      0005B0 D0 0F            [24] 1313 	pop	ar7
      0005B2 EA               [12] 1314 	mov	a,r2
      0005B3 4B               [12] 1315 	orl	a,r3
      0005B4 70 27            [24] 1316 	jnz	00117$
      0005B6 C3               [12] 1317 	clr	c
      0005B7 74 07            [12] 1318 	mov	a,#0x07
      0005B9 95*06            [12] 1319 	subb	a,_mon
      0005BB 74 80            [12] 1320 	mov	a,#(0x00 ^ 0x80)
      0005BD 85*07 F0         [24] 1321 	mov	b,(_mon + 1)
      0005C0 63 F0 80         [24] 1322 	xrl	b,#0x80
      0005C3 95 F0            [12] 1323 	subb	a,b
      0005C5 50 16            [24] 1324 	jnc	00117$
      0005C7 BA 01 13         [24] 1325 	cjne	r2,#0x01,00117$
      0005CA BB 00 10         [24] 1326 	cjne	r3,#0x00,00117$
                                   1327 ;	assignment4.c:180: p--;
      0005CD 15*0C            [12] 1328 	dec	_p
      0005CF 74 FF            [12] 1329 	mov	a,#0xFF
      0005D1 B5*0C 02         [24] 1330 	cjne	a,_p,00334$
      0005D4 15*0D            [12] 1331 	dec	(_p + 1)
      0005D6                       1332 00334$:
                                   1333 ;	assignment4.c:181: i--;
      0005D6 1E               [12] 1334 	dec	r6
      0005D7 BE FF 01         [24] 1335 	cjne	r6,#0xFF,00335$
      0005DA 1F               [12] 1336 	dec	r7
      0005DB                       1337 00335$:
      0005DB 80 70            [24] 1338 	sjmp	00155$
      0005DD                       1339 00117$:
                                   1340 ;	assignment4.c:183: day = t;
      0005DD 8C*08            [24] 1341 	mov	_day,r4
      0005DF 8D*09            [24] 1342 	mov	(_day + 1),r5
                                   1343 ;	assignment4.c:184: i = 0;
      0005E1 7E 00            [12] 1344 	mov	r6,#0x00
      0005E3 7F 00            [12] 1345 	mov	r7,#0x00
                                   1346 ;	assignment4.c:185: p++;
      0005E5 05*0C            [12] 1347 	inc	_p
      0005E7 E4               [12] 1348 	clr	a
      0005E8 B5*0C 62         [24] 1349 	cjne	a,_p,00155$
      0005EB 05*0D            [12] 1350 	inc	(_p + 1)
      0005ED 80 5E            [24] 1351 	sjmp	00155$
      0005EF                       1352 00152$:
                                   1353 ;	assignment4.c:187: } else if (p == 0x45) {
      0005EF 74 45            [12] 1354 	mov	a,#0x45
      0005F1 B5*0C 06         [24] 1355 	cjne	a,_p,00337$
      0005F4 E4               [12] 1356 	clr	a
      0005F5 B5*0D 02         [24] 1357 	cjne	a,(_p + 1),00337$
      0005F8 80 02            [24] 1358 	sjmp	00338$
      0005FA                       1359 00337$:
      0005FA 80 3C            [24] 1360 	sjmp	00149$
      0005FC                       1361 00338$:
                                   1362 ;	assignment4.c:188: if (t > 12 && t < 1) {
      0005FC C3               [12] 1363 	clr	c
      0005FD 74 0C            [12] 1364 	mov	a,#0x0C
      0005FF 9C               [12] 1365 	subb	a,r4
      000600 74 80            [12] 1366 	mov	a,#(0x00 ^ 0x80)
      000602 8D F0            [24] 1367 	mov	b,r5
      000604 63 F0 80         [24] 1368 	xrl	b,#0x80
      000607 95 F0            [12] 1369 	subb	a,b
      000609 50 1B            [24] 1370 	jnc	00143$
      00060B C3               [12] 1371 	clr	c
      00060C EC               [12] 1372 	mov	a,r4
      00060D 94 01            [12] 1373 	subb	a,#0x01
      00060F ED               [12] 1374 	mov	a,r5
      000610 64 80            [12] 1375 	xrl	a,#0x80
      000612 94 80            [12] 1376 	subb	a,#0x80
      000614 50 10            [24] 1377 	jnc	00143$
                                   1378 ;	assignment4.c:189: p--;
      000616 15*0C            [12] 1379 	dec	_p
      000618 74 FF            [12] 1380 	mov	a,#0xFF
      00061A B5*0C 02         [24] 1381 	cjne	a,_p,00341$
      00061D 15*0D            [12] 1382 	dec	(_p + 1)
      00061F                       1383 00341$:
                                   1384 ;	assignment4.c:190: i--;
      00061F 1E               [12] 1385 	dec	r6
      000620 BE FF 01         [24] 1386 	cjne	r6,#0xFF,00342$
      000623 1F               [12] 1387 	dec	r7
      000624                       1388 00342$:
      000624 80 27            [24] 1389 	sjmp	00155$
      000626                       1390 00143$:
                                   1391 ;	assignment4.c:192: mon = t;
      000626 8C*06            [24] 1392 	mov	_mon,r4
      000628 8D*07            [24] 1393 	mov	(_mon + 1),r5
                                   1394 ;	assignment4.c:193: i = 0;
      00062A 7E 00            [12] 1395 	mov	r6,#0x00
      00062C 7F 00            [12] 1396 	mov	r7,#0x00
                                   1397 ;	assignment4.c:194: p++;
      00062E 05*0C            [12] 1398 	inc	_p
      000630 E4               [12] 1399 	clr	a
      000631 B5*0C 19         [24] 1400 	cjne	a,_p,00155$
      000634 05*0D            [12] 1401 	inc	(_p + 1)
      000636 80 15            [24] 1402 	sjmp	00155$
      000638                       1403 00149$:
                                   1404 ;	assignment4.c:196: } else if (p == 0x48) {
      000638 74 48            [12] 1405 	mov	a,#0x48
      00063A B5*0C 06         [24] 1406 	cjne	a,_p,00344$
      00063D E4               [12] 1407 	clr	a
      00063E B5*0D 02         [24] 1408 	cjne	a,(_p + 1),00344$
      000641 80 02            [24] 1409 	sjmp	00345$
      000643                       1410 00344$:
      000643 80 08            [24] 1411 	sjmp	00155$
      000645                       1412 00345$:
                                   1413 ;	assignment4.c:197: yr = t;
      000645 8C*0A            [24] 1414 	mov	_yr,r4
      000647 8D*0B            [24] 1415 	mov	(_yr + 1),r5
                                   1416 ;	assignment4.c:198: i = 0;
      000649 7E 00            [12] 1417 	mov	r6,#0x00
      00064B 7F 00            [12] 1418 	mov	r7,#0x00
                                   1419 ;	assignment4.c:199: p == 0x40;
      00064D                       1420 00155$:
                                   1421 ;	assignment4.c:202: setDdRamAddress(p);
      00064D 85*0C 82         [24] 1422 	mov	dpl,_p
      000650 C0 0F            [24] 1423 	push	ar7
      000652 C0 0E            [24] 1424 	push	ar6
      000654 75 D0 00         [24] 1425 	mov	psw,#0x00
      000657 12r0Br07         [24] 1426 	lcall	_setDdRamAddress
      00065A 75 D0 08         [24] 1427 	mov	psw,#0x08
      00065D D0 0E            [24] 1428 	pop	ar6
      00065F D0 0F            [24] 1429 	pop	ar7
      000661 02r02rCA         [24] 1430 	ljmp	00169$
      000664                       1431 00171$:
      000664 D0 D0            [24] 1432 	pop	psw
      000666 D0 00            [24] 1433 	pop	(0+0)
      000668 D0 01            [24] 1434 	pop	(0+1)
      00066A D0 02            [24] 1435 	pop	(0+2)
      00066C D0 03            [24] 1436 	pop	(0+3)
      00066E D0 04            [24] 1437 	pop	(0+4)
      000670 D0 05            [24] 1438 	pop	(0+5)
      000672 D0 06            [24] 1439 	pop	(0+6)
      000674 D0 07            [24] 1440 	pop	(0+7)
      000676 D0 83            [24] 1441 	pop	dph
      000678 D0 82            [24] 1442 	pop	dpl
      00067A D0 F0            [24] 1443 	pop	b
      00067C D0 E0            [24] 1444 	pop	acc
      00067E D0*00            [24] 1445 	pop	bits
      000680 32               [24] 1446 	reti
                                   1447 ;------------------------------------------------------------
                                   1448 ;Allocation info for local variables in function 'main'
                                   1449 ;------------------------------------------------------------
                                   1450 ;	assignment4.c:208: void main(void) __naked {
                                   1451 ;	-----------------------------------------
                                   1452 ;	 function main
                                   1453 ;	-----------------------------------------
      000681                       1454 _main:
                                   1455 ;	naked function: no prologue.
                                   1456 ;	assignment4.c:209: mon = 1;
      000681 75*06 01         [24] 1457 	mov	_mon,#0x01
      000684 75*07 00         [24] 1458 	mov	(_mon + 1),#0x00
                                   1459 ;	assignment4.c:210: day = 1;
      000687 75*08 01         [24] 1460 	mov	_day,#0x01
      00068A 75*09 00         [24] 1461 	mov	(_day + 1),#0x00
                                   1462 ;	assignment4.c:213: IT0 = 1; // make INT0 to edge triggered
      00068D D2 88            [12] 1463 	setb	_IT0
                                   1464 ;	assignment4.c:214: IT1 = 1; // make INT1 to edge triggered
      00068F D2 8A            [12] 1465 	setb	_IT1
                                   1466 ;	assignment4.c:215: IE = 0x85; // enable external interrupt0 and interrupt1
      000691 75 A8 85         [24] 1467 	mov	_IE,#0x85
                                   1468 ;	assignment4.c:217: functionSet();
      000694 12r0ArEF         [24] 1469 	lcall	_functionSet
                                   1470 ;	assignment4.c:218: entryModeSet(); // increment and no shift
      000697 12r0ArA9         [24] 1471 	lcall	_entryModeSet
                                   1472 ;	assignment4.c:219: displayOnOffControl(1, 1, 1); // display on, cursor on and blinking on
      00069A D2*00            [12] 1473 	setb	_displayOnOffControl_PARM_1
      00069C D2*01            [12] 1474 	setb	_displayOnOffControl_PARM_2
      00069E D2*02            [12] 1475 	setb	_displayOnOffControl_PARM_3
      0006A0 12r0ArB5         [24] 1476 	lcall	_displayOnOffControl
                                   1477 ;	assignment4.c:220: sendString("00|00|00");
      0006A3 90r00r00         [24] 1478 	mov	dptr,#___str_0
      0006A6 75 F0 80         [24] 1479 	mov	b,#0x80
      0006A9 12r0Br24         [24] 1480 	lcall	_sendString
                                   1481 ;	assignment4.c:221: setDdRamAddress(0x40);	// set address to start of sec line
      0006AC 75 82 40         [24] 1482 	mov	dpl,#0x40
      0006AF 12r0Br07         [24] 1483 	lcall	_setDdRamAddress
                                   1484 ;	assignment4.c:222: sendString("01|01|00");
      0006B2 90r00r09         [24] 1485 	mov	dptr,#___str_1
      0006B5 75 F0 80         [24] 1486 	mov	b,#0x80
      0006B8 12r0Br24         [24] 1487 	lcall	_sendString
                                   1488 ;	assignment4.c:225: while(1) {
      0006BB                       1489 00129$:
                                   1490 ;	assignment4.c:227: for(hr = 0 ; hr < 24; hr ++ ) {
      0006BB E4               [12] 1491 	clr	a
      0006BC F5*00            [12] 1492 	mov	_hr,a
      0006BE F5*01            [12] 1493 	mov	(_hr + 1),a
      0006C0                       1494 00135$:
                                   1495 ;	assignment4.c:228: for(min = 0; min < 60; min ++) {
      0006C0 E4               [12] 1496 	clr	a
      0006C1 F5*02            [12] 1497 	mov	_min,a
      0006C3 F5*03            [12] 1498 	mov	(_min + 1),a
      0006C5                       1499 00133$:
                                   1500 ;	assignment4.c:229: for(sec = 0 ; sec < 60; sec ++ ) {
      0006C5 E4               [12] 1501 	clr	a
      0006C6 F5*04            [12] 1502 	mov	_sec,a
      0006C8 F5*05            [12] 1503 	mov	(_sec + 1),a
      0006CA                       1504 00131$:
                                   1505 ;	assignment4.c:230: sec++;
      0006CA 05*04            [12] 1506 	inc	_sec
      0006CC E4               [12] 1507 	clr	a
      0006CD B5*04 02         [24] 1508 	cjne	a,_sec,00196$
      0006D0 05*05            [12] 1509 	inc	(_sec + 1)
      0006D2                       1510 00196$:
                                   1511 ;	assignment4.c:231: timer_delay();		
      0006D2 12r0Ar90         [24] 1512 	lcall	_timer_delay
                                   1513 ;	assignment4.c:232: returnHome();
      0006D5 12r0Ar71         [24] 1514 	lcall	_returnHome
                                   1515 ;	assignment4.c:233: hrminsec(hr, min, sec);
      0006D8 85*02*14         [24] 1516 	mov	_hrminsec_PARM_2,_min
      0006DB 85*03*15         [24] 1517 	mov	(_hrminsec_PARM_2 + 1),(_min + 1)
      0006DE 85*04*16         [24] 1518 	mov	_hrminsec_PARM_3,_sec
      0006E1 85*05*17         [24] 1519 	mov	(_hrminsec_PARM_3 + 1),(_sec + 1)
      0006E4 85*00 82         [24] 1520 	mov	dpl,_hr
      0006E7 85*01 83         [24] 1521 	mov	dph,(_hr + 1)
      0006EA 12r08rAC         [24] 1522 	lcall	_hrminsec
                                   1523 ;	assignment4.c:229: for(sec = 0 ; sec < 60; sec ++ ) {
      0006ED 05*04            [12] 1524 	inc	_sec
      0006EF E4               [12] 1525 	clr	a
      0006F0 B5*04 02         [24] 1526 	cjne	a,_sec,00197$
      0006F3 05*05            [12] 1527 	inc	(_sec + 1)
      0006F5                       1528 00197$:
      0006F5 C3               [12] 1529 	clr	c
      0006F6 E5*04            [12] 1530 	mov	a,_sec
      0006F8 94 3C            [12] 1531 	subb	a,#0x3C
      0006FA E5*05            [12] 1532 	mov	a,(_sec + 1)
      0006FC 64 80            [12] 1533 	xrl	a,#0x80
      0006FE 94 80            [12] 1534 	subb	a,#0x80
      000700 40 C8            [24] 1535 	jc	00131$
                                   1536 ;	assignment4.c:235: sec = 0;
      000702 E4               [12] 1537 	clr	a
      000703 F5*04            [12] 1538 	mov	_sec,a
      000705 F5*05            [12] 1539 	mov	(_sec + 1),a
                                   1540 ;	assignment4.c:236: min = min + 1;
      000707 05*02            [12] 1541 	inc	_min
                                   1542 ;	genFromRTrack removed	clr	a
      000709 B5*02 02         [24] 1543 	cjne	a,_min,00199$
      00070C 05*03            [12] 1544 	inc	(_min + 1)
      00070E                       1545 00199$:
                                   1546 ;	assignment4.c:238: returnHome();
      00070E 12r0Ar71         [24] 1547 	lcall	_returnHome
                                   1548 ;	assignment4.c:239: hrminsec(hr, min, sec);
      000711 85*02*14         [24] 1549 	mov	_hrminsec_PARM_2,_min
      000714 85*03*15         [24] 1550 	mov	(_hrminsec_PARM_2 + 1),(_min + 1)
      000717 85*04*16         [24] 1551 	mov	_hrminsec_PARM_3,_sec
      00071A 85*05*17         [24] 1552 	mov	(_hrminsec_PARM_3 + 1),(_sec + 1)
      00071D 85*00 82         [24] 1553 	mov	dpl,_hr
      000720 85*01 83         [24] 1554 	mov	dph,(_hr + 1)
      000723 12r08rAC         [24] 1555 	lcall	_hrminsec
                                   1556 ;	assignment4.c:228: for(min = 0; min < 60; min ++) {
      000726 05*02            [12] 1557 	inc	_min
      000728 E4               [12] 1558 	clr	a
      000729 B5*02 02         [24] 1559 	cjne	a,_min,00200$
      00072C 05*03            [12] 1560 	inc	(_min + 1)
      00072E                       1561 00200$:
      00072E C3               [12] 1562 	clr	c
      00072F E5*02            [12] 1563 	mov	a,_min
      000731 94 3C            [12] 1564 	subb	a,#0x3C
      000733 E5*03            [12] 1565 	mov	a,(_min + 1)
      000735 64 80            [12] 1566 	xrl	a,#0x80
      000737 94 80            [12] 1567 	subb	a,#0x80
      000739 40 8A            [24] 1568 	jc	00133$
                                   1569 ;	assignment4.c:241: min = 0;
      00073B E4               [12] 1570 	clr	a
      00073C F5*02            [12] 1571 	mov	_min,a
      00073E F5*03            [12] 1572 	mov	(_min + 1),a
                                   1573 ;	assignment4.c:242: hr = hr + 1 ;
      000740 05*00            [12] 1574 	inc	_hr
                                   1575 ;	genFromRTrack removed	clr	a
      000742 B5*00 02         [24] 1576 	cjne	a,_hr,00202$
      000745 05*01            [12] 1577 	inc	(_hr + 1)
      000747                       1578 00202$:
                                   1579 ;	assignment4.c:244: returnHome();
      000747 12r0Ar71         [24] 1580 	lcall	_returnHome
                                   1581 ;	assignment4.c:245: if (hr == 24) {
      00074A 74 18            [12] 1582 	mov	a,#0x18
      00074C B5*00 06         [24] 1583 	cjne	a,_hr,00203$
      00074F E4               [12] 1584 	clr	a
      000750 B5*01 02         [24] 1585 	cjne	a,(_hr + 1),00203$
      000753 80 02            [24] 1586 	sjmp	00204$
      000755                       1587 00203$:
      000755 80 07            [24] 1588 	sjmp	00104$
      000757                       1589 00204$:
                                   1590 ;	assignment4.c:246: hr = 0;
      000757 E4               [12] 1591 	clr	a
      000758 F5*00            [12] 1592 	mov	_hr,a
      00075A F5*01            [12] 1593 	mov	(_hr + 1),a
                                   1594 ;	assignment4.c:247: break;
      00075C 80 2D            [24] 1595 	sjmp	00105$
      00075E                       1596 00104$:
                                   1597 ;	assignment4.c:249: hrminsec(hr, min, sec);
      00075E 85*02*14         [24] 1598 	mov	_hrminsec_PARM_2,_min
      000761 85*03*15         [24] 1599 	mov	(_hrminsec_PARM_2 + 1),(_min + 1)
      000764 85*04*16         [24] 1600 	mov	_hrminsec_PARM_3,_sec
      000767 85*05*17         [24] 1601 	mov	(_hrminsec_PARM_3 + 1),(_sec + 1)
      00076A 85*00 82         [24] 1602 	mov	dpl,_hr
      00076D 85*01 83         [24] 1603 	mov	dph,(_hr + 1)
      000770 12r08rAC         [24] 1604 	lcall	_hrminsec
                                   1605 ;	assignment4.c:227: for(hr = 0 ; hr < 24; hr ++ ) {
      000773 05*00            [12] 1606 	inc	_hr
      000775 E4               [12] 1607 	clr	a
      000776 B5*00 02         [24] 1608 	cjne	a,_hr,00205$
      000779 05*01            [12] 1609 	inc	(_hr + 1)
      00077B                       1610 00205$:
      00077B C3               [12] 1611 	clr	c
      00077C E5*00            [12] 1612 	mov	a,_hr
      00077E 94 18            [12] 1613 	subb	a,#0x18
      000780 E5*01            [12] 1614 	mov	a,(_hr + 1)
      000782 64 80            [12] 1615 	xrl	a,#0x80
      000784 94 80            [12] 1616 	subb	a,#0x80
      000786 50 03            [24] 1617 	jnc	00206$
      000788 02r06rC0         [24] 1618 	ljmp	00135$
      00078B                       1619 00206$:
      00078B                       1620 00105$:
                                   1621 ;	assignment4.c:251: hrminsec(hr, min, sec);
      00078B 85*02*14         [24] 1622 	mov	_hrminsec_PARM_2,_min
      00078E 85*03*15         [24] 1623 	mov	(_hrminsec_PARM_2 + 1),(_min + 1)
      000791 85*04*16         [24] 1624 	mov	_hrminsec_PARM_3,_sec
      000794 85*05*17         [24] 1625 	mov	(_hrminsec_PARM_3 + 1),(_sec + 1)
      000797 85*00 82         [24] 1626 	mov	dpl,_hr
      00079A 85*01 83         [24] 1627 	mov	dph,(_hr + 1)
      00079D 12r08rAC         [24] 1628 	lcall	_hrminsec
                                   1629 ;	assignment4.c:252: day++;
      0007A0 05*08            [12] 1630 	inc	_day
      0007A2 E4               [12] 1631 	clr	a
      0007A3 B5*08 02         [24] 1632 	cjne	a,_day,00207$
      0007A6 05*09            [12] 1633 	inc	(_day + 1)
      0007A8                       1634 00207$:
                                   1635 ;	assignment4.c:253: if ( (mon == 1) || (mon ==3) || (mon ==5) || (mon ==7) || 
      0007A8 74 01            [12] 1636 	mov	a,#0x01
      0007AA B5*06 06         [24] 1637 	cjne	a,_mon,00208$
      0007AD E4               [12] 1638 	clr	a
      0007AE B5*07 02         [24] 1639 	cjne	a,(_mon + 1),00208$
      0007B1 80 44            [24] 1640 	sjmp	00115$
      0007B3                       1641 00208$:
      0007B3 74 03            [12] 1642 	mov	a,#0x03
      0007B5 B5*06 06         [24] 1643 	cjne	a,_mon,00209$
      0007B8 E4               [12] 1644 	clr	a
      0007B9 B5*07 02         [24] 1645 	cjne	a,(_mon + 1),00209$
      0007BC 80 39            [24] 1646 	sjmp	00115$
      0007BE                       1647 00209$:
      0007BE 74 05            [12] 1648 	mov	a,#0x05
      0007C0 B5*06 06         [24] 1649 	cjne	a,_mon,00210$
      0007C3 E4               [12] 1650 	clr	a
      0007C4 B5*07 02         [24] 1651 	cjne	a,(_mon + 1),00210$
      0007C7 80 2E            [24] 1652 	sjmp	00115$
      0007C9                       1653 00210$:
      0007C9 74 07            [12] 1654 	mov	a,#0x07
      0007CB B5*06 06         [24] 1655 	cjne	a,_mon,00211$
      0007CE E4               [12] 1656 	clr	a
      0007CF B5*07 02         [24] 1657 	cjne	a,(_mon + 1),00211$
      0007D2 80 23            [24] 1658 	sjmp	00115$
      0007D4                       1659 00211$:
                                   1660 ;	assignment4.c:254: (mon == 8) || (mon ==10) || mon ==12) {	// checks for months with 31 days
      0007D4 74 08            [12] 1661 	mov	a,#0x08
      0007D6 B5*06 06         [24] 1662 	cjne	a,_mon,00212$
      0007D9 E4               [12] 1663 	clr	a
      0007DA B5*07 02         [24] 1664 	cjne	a,(_mon + 1),00212$
      0007DD 80 18            [24] 1665 	sjmp	00115$
      0007DF                       1666 00212$:
      0007DF 74 0A            [12] 1667 	mov	a,#0x0A
      0007E1 B5*06 06         [24] 1668 	cjne	a,_mon,00213$
      0007E4 E4               [12] 1669 	clr	a
      0007E5 B5*07 02         [24] 1670 	cjne	a,(_mon + 1),00213$
      0007E8 80 0D            [24] 1671 	sjmp	00115$
      0007EA                       1672 00213$:
      0007EA 74 0C            [12] 1673 	mov	a,#0x0C
      0007EC B5*06 06         [24] 1674 	cjne	a,_mon,00214$
      0007EF E4               [12] 1675 	clr	a
      0007F0 B5*07 02         [24] 1676 	cjne	a,(_mon + 1),00214$
      0007F3 80 02            [24] 1677 	sjmp	00215$
      0007F5                       1678 00214$:
      0007F5 80 21            [24] 1679 	sjmp	00116$
      0007F7                       1680 00215$:
      0007F7                       1681 00115$:
                                   1682 ;	assignment4.c:255: if (day > 31) {
      0007F7 C3               [12] 1683 	clr	c
      0007F8 74 1F            [12] 1684 	mov	a,#0x1F
      0007FA 95*08            [12] 1685 	subb	a,_day
      0007FC 74 80            [12] 1686 	mov	a,#(0x00 ^ 0x80)
      0007FE 85*09 F0         [24] 1687 	mov	b,(_day + 1)
      000801 63 F0 80         [24] 1688 	xrl	b,#0x80
      000804 95 F0            [12] 1689 	subb	a,b
      000806 50 59            [24] 1690 	jnc	00117$
                                   1691 ;	assignment4.c:256: day = 1;
      000808 75*08 01         [24] 1692 	mov	_day,#0x01
      00080B 75*09 00         [24] 1693 	mov	(_day + 1),#0x00
                                   1694 ;	assignment4.c:257: mon = mon +1;
      00080E 05*06            [12] 1695 	inc	_mon
      000810 E4               [12] 1696 	clr	a
      000811 B5*06 4D         [24] 1697 	cjne	a,_mon,00117$
      000814 05*07            [12] 1698 	inc	(_mon + 1)
      000816 80 49            [24] 1699 	sjmp	00117$
      000818                       1700 00116$:
                                   1701 ;	assignment4.c:260: else if (mon == 2) {	 // feb 
      000818 74 02            [12] 1702 	mov	a,#0x02
      00081A B5*06 06         [24] 1703 	cjne	a,_mon,00218$
      00081D E4               [12] 1704 	clr	a
      00081E B5*07 02         [24] 1705 	cjne	a,(_mon + 1),00218$
      000821 80 02            [24] 1706 	sjmp	00219$
      000823                       1707 00218$:
      000823 80 21            [24] 1708 	sjmp	00113$
      000825                       1709 00219$:
                                   1710 ;	assignment4.c:261: if (day > 28) {
      000825 C3               [12] 1711 	clr	c
      000826 74 1C            [12] 1712 	mov	a,#0x1C
      000828 95*08            [12] 1713 	subb	a,_day
      00082A 74 80            [12] 1714 	mov	a,#(0x00 ^ 0x80)
      00082C 85*09 F0         [24] 1715 	mov	b,(_day + 1)
      00082F 63 F0 80         [24] 1716 	xrl	b,#0x80
      000832 95 F0            [12] 1717 	subb	a,b
      000834 50 2B            [24] 1718 	jnc	00117$
                                   1719 ;	assignment4.c:262: day = 1;
      000836 75*08 01         [24] 1720 	mov	_day,#0x01
      000839 75*09 00         [24] 1721 	mov	(_day + 1),#0x00
                                   1722 ;	assignment4.c:263: mon = mon +1;
      00083C 05*06            [12] 1723 	inc	_mon
      00083E E4               [12] 1724 	clr	a
      00083F B5*06 1F         [24] 1725 	cjne	a,_mon,00117$
      000842 05*07            [12] 1726 	inc	(_mon + 1)
      000844 80 1B            [24] 1727 	sjmp	00117$
      000846                       1728 00113$:
                                   1729 ;	assignment4.c:267: if (day == 31) {
      000846 74 1F            [12] 1730 	mov	a,#0x1F
      000848 B5*08 06         [24] 1731 	cjne	a,_day,00222$
      00084B E4               [12] 1732 	clr	a
      00084C B5*09 02         [24] 1733 	cjne	a,(_day + 1),00222$
      00084F 80 02            [24] 1734 	sjmp	00223$
      000851                       1735 00222$:
      000851 80 0E            [24] 1736 	sjmp	00117$
      000853                       1737 00223$:
                                   1738 ;	assignment4.c:268: day = 1;
      000853 75*08 01         [24] 1739 	mov	_day,#0x01
      000856 75*09 00         [24] 1740 	mov	(_day + 1),#0x00
                                   1741 ;	assignment4.c:269: mon = mon +1;
      000859 05*06            [12] 1742 	inc	_mon
      00085B E4               [12] 1743 	clr	a
      00085C B5*06 02         [24] 1744 	cjne	a,_mon,00224$
      00085F 05*07            [12] 1745 	inc	(_mon + 1)
      000861                       1746 00224$:
      000861                       1747 00117$:
                                   1748 ;	assignment4.c:272: if (mon == 13) {
      000861 74 0D            [12] 1749 	mov	a,#0x0D
      000863 B5*06 06         [24] 1750 	cjne	a,_mon,00225$
      000866 E4               [12] 1751 	clr	a
      000867 B5*07 02         [24] 1752 	cjne	a,(_mon + 1),00225$
      00086A 80 02            [24] 1753 	sjmp	00226$
      00086C                       1754 00225$:
      00086C 80 0E            [24] 1755 	sjmp	00125$
      00086E                       1756 00226$:
                                   1757 ;	assignment4.c:273: mon = 1;
      00086E 75*06 01         [24] 1758 	mov	_mon,#0x01
      000871 75*07 00         [24] 1759 	mov	(_mon + 1),#0x00
                                   1760 ;	assignment4.c:274: yr = yr +1;
      000874 05*0A            [12] 1761 	inc	_yr
      000876 E4               [12] 1762 	clr	a
      000877 B5*0A 02         [24] 1763 	cjne	a,_yr,00227$
      00087A 05*0B            [12] 1764 	inc	(_yr + 1)
      00087C                       1765 00227$:
      00087C                       1766 00125$:
                                   1767 ;	assignment4.c:277: if (yr == 100) {
      00087C 74 64            [12] 1768 	mov	a,#0x64
      00087E B5*0A 06         [24] 1769 	cjne	a,_yr,00228$
      000881 E4               [12] 1770 	clr	a
      000882 B5*0B 02         [24] 1771 	cjne	a,(_yr + 1),00228$
      000885 80 02            [24] 1772 	sjmp	00229$
      000887                       1773 00228$:
      000887 80 05            [24] 1774 	sjmp	00127$
      000889                       1775 00229$:
                                   1776 ;	assignment4.c:278: yr = 0;
      000889 E4               [12] 1777 	clr	a
      00088A F5*0A            [12] 1778 	mov	_yr,a
      00088C F5*0B            [12] 1779 	mov	(_yr + 1),a
      00088E                       1780 00127$:
                                   1781 ;	assignment4.c:280: setDdRamAddress(0x40);
      00088E 75 82 40         [24] 1782 	mov	dpl,#0x40
      000891 12r0Br07         [24] 1783 	lcall	_setDdRamAddress
                                   1784 ;	assignment4.c:281: displayyear(mon, day, yr);
      000894 85*08*18         [24] 1785 	mov	_displayyear_PARM_2,_day
      000897 85*09*19         [24] 1786 	mov	(_displayyear_PARM_2 + 1),(_day + 1)
      00089A 85*0A*1A         [24] 1787 	mov	_displayyear_PARM_3,_yr
      00089D 85*0B*1B         [24] 1788 	mov	(_displayyear_PARM_3 + 1),(_yr + 1)
      0008A0 85*06 82         [24] 1789 	mov	dpl,_mon
      0008A3 85*07 83         [24] 1790 	mov	dph,(_mon + 1)
      0008A6 12r09r52         [24] 1791 	lcall	_displayyear
      0008A9 02r06rBB         [24] 1792 	ljmp	00129$
                                   1793 ;	naked function: no epilogue.
                                   1794 ;------------------------------------------------------------
                                   1795 ;Allocation info for local variables in function 'hrminsec'
                                   1796 ;------------------------------------------------------------
                                   1797 ;m                         Allocated with name '_hrminsec_PARM_2'
                                   1798 ;s                         Allocated with name '_hrminsec_PARM_3'
                                   1799 ;h                         Allocated to registers r6 r7 
                                   1800 ;------------------------------------------------------------
                                   1801 ;	assignment4.c:285: void hrminsec(int h, int m, int s) {
                                   1802 ;	-----------------------------------------
                                   1803 ;	 function hrminsec
                                   1804 ;	-----------------------------------------
      0008AC                       1805 _hrminsec:
                           000007  1806 	ar7 = 0x07
                           000006  1807 	ar6 = 0x06
                           000005  1808 	ar5 = 0x05
                           000004  1809 	ar4 = 0x04
                           000003  1810 	ar3 = 0x03
                           000002  1811 	ar2 = 0x02
                           000001  1812 	ar1 = 0x01
                           000000  1813 	ar0 = 0x00
                                   1814 ;	assignment4.c:286: sendChar(h / 10 + 48);
      0008AC AE 82            [24] 1815 	mov	r6,dpl
      0008AE AF 83            [24] 1816 	mov	r7,dph
      0008B0 75*00 0A         [24] 1817 	mov	__divsint_PARM_2,#0x0A
      0008B3 75*01 00         [24] 1818 	mov	(__divsint_PARM_2 + 1),#0x00
      0008B6 C0 07            [24] 1819 	push	ar7
      0008B8 C0 06            [24] 1820 	push	ar6
      0008BA 12r00r00         [24] 1821 	lcall	__divsint
      0008BD AC 82            [24] 1822 	mov	r4,dpl
      0008BF 74 30            [12] 1823 	mov	a,#0x30
      0008C1 2C               [12] 1824 	add	a,r4
      0008C2 F5 82            [12] 1825 	mov	dpl,a
      0008C4 12r0Br17         [24] 1826 	lcall	_sendChar
      0008C7 D0 06            [24] 1827 	pop	ar6
      0008C9 D0 07            [24] 1828 	pop	ar7
                                   1829 ;	assignment4.c:287: sendChar(h % 10 + 48);	
      0008CB 75*00 0A         [24] 1830 	mov	__modsint_PARM_2,#0x0A
      0008CE 75*01 00         [24] 1831 	mov	(__modsint_PARM_2 + 1),#0x00
      0008D1 8E 82            [24] 1832 	mov	dpl,r6
      0008D3 8F 83            [24] 1833 	mov	dph,r7
      0008D5 12r00r00         [24] 1834 	lcall	__modsint
      0008D8 AE 82            [24] 1835 	mov	r6,dpl
      0008DA 74 30            [12] 1836 	mov	a,#0x30
      0008DC 2E               [12] 1837 	add	a,r6
      0008DD F5 82            [12] 1838 	mov	dpl,a
      0008DF 12r0Br17         [24] 1839 	lcall	_sendChar
                                   1840 ;	assignment4.c:288: sendChar('|');	
      0008E2 75 82 7C         [24] 1841 	mov	dpl,#0x7C
      0008E5 12r0Br17         [24] 1842 	lcall	_sendChar
                                   1843 ;	assignment4.c:289: sendChar(m / 10 + 48);
      0008E8 75*00 0A         [24] 1844 	mov	__divsint_PARM_2,#0x0A
      0008EB 75*01 00         [24] 1845 	mov	(__divsint_PARM_2 + 1),#0x00
      0008EE 85*14 82         [24] 1846 	mov	dpl,_hrminsec_PARM_2
      0008F1 85*15 83         [24] 1847 	mov	dph,(_hrminsec_PARM_2 + 1)
      0008F4 12r00r00         [24] 1848 	lcall	__divsint
      0008F7 AE 82            [24] 1849 	mov	r6,dpl
      0008F9 74 30            [12] 1850 	mov	a,#0x30
      0008FB 2E               [12] 1851 	add	a,r6
      0008FC F5 82            [12] 1852 	mov	dpl,a
      0008FE 12r0Br17         [24] 1853 	lcall	_sendChar
                                   1854 ;	assignment4.c:290: sendChar(m % 10 + 48);
      000901 75*00 0A         [24] 1855 	mov	__modsint_PARM_2,#0x0A
      000904 75*01 00         [24] 1856 	mov	(__modsint_PARM_2 + 1),#0x00
      000907 85*14 82         [24] 1857 	mov	dpl,_hrminsec_PARM_2
      00090A 85*15 83         [24] 1858 	mov	dph,(_hrminsec_PARM_2 + 1)
      00090D 12r00r00         [24] 1859 	lcall	__modsint
      000910 AE 82            [24] 1860 	mov	r6,dpl
      000912 74 30            [12] 1861 	mov	a,#0x30
      000914 2E               [12] 1862 	add	a,r6
      000915 F5 82            [12] 1863 	mov	dpl,a
      000917 12r0Br17         [24] 1864 	lcall	_sendChar
                                   1865 ;	assignment4.c:291: sendChar('|');
      00091A 75 82 7C         [24] 1866 	mov	dpl,#0x7C
      00091D 12r0Br17         [24] 1867 	lcall	_sendChar
                                   1868 ;	assignment4.c:292: sendChar(s / 10 + 48);
      000920 75*00 0A         [24] 1869 	mov	__divsint_PARM_2,#0x0A
      000923 75*01 00         [24] 1870 	mov	(__divsint_PARM_2 + 1),#0x00
      000926 85*16 82         [24] 1871 	mov	dpl,_hrminsec_PARM_3
      000929 85*17 83         [24] 1872 	mov	dph,(_hrminsec_PARM_3 + 1)
      00092C 12r00r00         [24] 1873 	lcall	__divsint
      00092F AE 82            [24] 1874 	mov	r6,dpl
      000931 74 30            [12] 1875 	mov	a,#0x30
      000933 2E               [12] 1876 	add	a,r6
      000934 F5 82            [12] 1877 	mov	dpl,a
      000936 12r0Br17         [24] 1878 	lcall	_sendChar
                                   1879 ;	assignment4.c:293: sendChar(s % 10 + 48);
      000939 75*00 0A         [24] 1880 	mov	__modsint_PARM_2,#0x0A
      00093C 75*01 00         [24] 1881 	mov	(__modsint_PARM_2 + 1),#0x00
      00093F 85*16 82         [24] 1882 	mov	dpl,_hrminsec_PARM_3
      000942 85*17 83         [24] 1883 	mov	dph,(_hrminsec_PARM_3 + 1)
      000945 12r00r00         [24] 1884 	lcall	__modsint
      000948 AE 82            [24] 1885 	mov	r6,dpl
      00094A 74 30            [12] 1886 	mov	a,#0x30
      00094C 2E               [12] 1887 	add	a,r6
      00094D F5 82            [12] 1888 	mov	dpl,a
      00094F 02r0Br17         [24] 1889 	ljmp	_sendChar
                                   1890 ;------------------------------------------------------------
                                   1891 ;Allocation info for local variables in function 'displayyear'
                                   1892 ;------------------------------------------------------------
                                   1893 ;day                       Allocated with name '_displayyear_PARM_2'
                                   1894 ;yr                        Allocated with name '_displayyear_PARM_3'
                                   1895 ;mon                       Allocated to registers r6 r7 
                                   1896 ;------------------------------------------------------------
                                   1897 ;	assignment4.c:296: void displayyear(int mon, int day, int yr) {
                                   1898 ;	-----------------------------------------
                                   1899 ;	 function displayyear
                                   1900 ;	-----------------------------------------
      000952                       1901 _displayyear:
                                   1902 ;	assignment4.c:297: sendChar(mon / 10 + 48);
      000952 AE 82            [24] 1903 	mov	r6,dpl
      000954 AF 83            [24] 1904 	mov	r7,dph
      000956 75*00 0A         [24] 1905 	mov	__divsint_PARM_2,#0x0A
      000959 75*01 00         [24] 1906 	mov	(__divsint_PARM_2 + 1),#0x00
      00095C C0 07            [24] 1907 	push	ar7
      00095E C0 06            [24] 1908 	push	ar6
      000960 12r00r00         [24] 1909 	lcall	__divsint
      000963 AC 82            [24] 1910 	mov	r4,dpl
      000965 74 30            [12] 1911 	mov	a,#0x30
      000967 2C               [12] 1912 	add	a,r4
      000968 F5 82            [12] 1913 	mov	dpl,a
      00096A 12r0Br17         [24] 1914 	lcall	_sendChar
      00096D D0 06            [24] 1915 	pop	ar6
      00096F D0 07            [24] 1916 	pop	ar7
                                   1917 ;	assignment4.c:298: sendChar(mon % 10 + 48);	
      000971 75*00 0A         [24] 1918 	mov	__modsint_PARM_2,#0x0A
      000974 75*01 00         [24] 1919 	mov	(__modsint_PARM_2 + 1),#0x00
      000977 8E 82            [24] 1920 	mov	dpl,r6
      000979 8F 83            [24] 1921 	mov	dph,r7
      00097B 12r00r00         [24] 1922 	lcall	__modsint
      00097E AE 82            [24] 1923 	mov	r6,dpl
      000980 74 30            [12] 1924 	mov	a,#0x30
      000982 2E               [12] 1925 	add	a,r6
      000983 F5 82            [12] 1926 	mov	dpl,a
      000985 12r0Br17         [24] 1927 	lcall	_sendChar
                                   1928 ;	assignment4.c:299: sendChar('|');	
      000988 75 82 7C         [24] 1929 	mov	dpl,#0x7C
      00098B 12r0Br17         [24] 1930 	lcall	_sendChar
                                   1931 ;	assignment4.c:300: sendChar(day / 10 + 48);
      00098E 75*00 0A         [24] 1932 	mov	__divsint_PARM_2,#0x0A
      000991 75*01 00         [24] 1933 	mov	(__divsint_PARM_2 + 1),#0x00
      000994 85*18 82         [24] 1934 	mov	dpl,_displayyear_PARM_2
      000997 85*19 83         [24] 1935 	mov	dph,(_displayyear_PARM_2 + 1)
      00099A 12r00r00         [24] 1936 	lcall	__divsint
      00099D AE 82            [24] 1937 	mov	r6,dpl
      00099F 74 30            [12] 1938 	mov	a,#0x30
      0009A1 2E               [12] 1939 	add	a,r6
      0009A2 F5 82            [12] 1940 	mov	dpl,a
      0009A4 12r0Br17         [24] 1941 	lcall	_sendChar
                                   1942 ;	assignment4.c:301: sendChar(day % 10 + 48);
      0009A7 75*00 0A         [24] 1943 	mov	__modsint_PARM_2,#0x0A
      0009AA 75*01 00         [24] 1944 	mov	(__modsint_PARM_2 + 1),#0x00
      0009AD 85*18 82         [24] 1945 	mov	dpl,_displayyear_PARM_2
      0009B0 85*19 83         [24] 1946 	mov	dph,(_displayyear_PARM_2 + 1)
      0009B3 12r00r00         [24] 1947 	lcall	__modsint
      0009B6 AE 82            [24] 1948 	mov	r6,dpl
      0009B8 74 30            [12] 1949 	mov	a,#0x30
      0009BA 2E               [12] 1950 	add	a,r6
      0009BB F5 82            [12] 1951 	mov	dpl,a
      0009BD 12r0Br17         [24] 1952 	lcall	_sendChar
                                   1953 ;	assignment4.c:302: sendChar('|');
      0009C0 75 82 7C         [24] 1954 	mov	dpl,#0x7C
      0009C3 12r0Br17         [24] 1955 	lcall	_sendChar
                                   1956 ;	assignment4.c:303: sendChar(yr / 10 + 48);
      0009C6 75*00 0A         [24] 1957 	mov	__divsint_PARM_2,#0x0A
      0009C9 75*01 00         [24] 1958 	mov	(__divsint_PARM_2 + 1),#0x00
      0009CC 85*1A 82         [24] 1959 	mov	dpl,_displayyear_PARM_3
      0009CF 85*1B 83         [24] 1960 	mov	dph,(_displayyear_PARM_3 + 1)
      0009D2 12r00r00         [24] 1961 	lcall	__divsint
      0009D5 AE 82            [24] 1962 	mov	r6,dpl
      0009D7 74 30            [12] 1963 	mov	a,#0x30
      0009D9 2E               [12] 1964 	add	a,r6
      0009DA F5 82            [12] 1965 	mov	dpl,a
      0009DC 12r0Br17         [24] 1966 	lcall	_sendChar
                                   1967 ;	assignment4.c:304: sendChar(yr % 10 + 48);
      0009DF 75*00 0A         [24] 1968 	mov	__modsint_PARM_2,#0x0A
      0009E2 75*01 00         [24] 1969 	mov	(__modsint_PARM_2 + 1),#0x00
      0009E5 85*1A 82         [24] 1970 	mov	dpl,_displayyear_PARM_3
      0009E8 85*1B 83         [24] 1971 	mov	dph,(_displayyear_PARM_3 + 1)
      0009EB 12r00r00         [24] 1972 	lcall	__modsint
      0009EE AE 82            [24] 1973 	mov	r6,dpl
      0009F0 74 30            [12] 1974 	mov	a,#0x30
      0009F2 2E               [12] 1975 	add	a,r6
      0009F3 F5 82            [12] 1976 	mov	dpl,a
      0009F5 02r0Br17         [24] 1977 	ljmp	_sendChar
                                   1978 ;------------------------------------------------------------
                                   1979 ;Allocation info for local variables in function 'getChar'
                                   1980 ;------------------------------------------------------------
                                   1981 ;row                       Allocated to registers r6 
                                   1982 ;col                       Allocated to registers r3 
                                   1983 ;keypad                    Allocated with name '_getChar_keypad_1_97'
                                   1984 ;i                         Allocated to registers r5 
                                   1985 ;gotkey                    Allocated to registers r7 
                                   1986 ;------------------------------------------------------------
                                   1987 ;	assignment4.c:309: char getChar(void) {
                                   1988 ;	-----------------------------------------
                                   1989 ;	 function getChar
                                   1990 ;	-----------------------------------------
      0009F8                       1991 _getChar:
                                   1992 ;	assignment4.c:312: unsigned char keypad[4][3] = {   // This array contains the ASCII of the keypad keys
      0009F8 75*1C 33         [24] 1993 	mov	_getChar_keypad_1_97,#0x33
      0009FB 75*1D 32         [24] 1994 	mov	(_getChar_keypad_1_97 + 0x0001),#0x32
      0009FE 75*1E 31         [24] 1995 	mov	(_getChar_keypad_1_97 + 0x0002),#0x31
      000A01 75*1F 36         [24] 1996 	mov	(_getChar_keypad_1_97 + 0x0003),#0x36
      000A04 75*20 35         [24] 1997 	mov	(_getChar_keypad_1_97 + 0x0004),#0x35
      000A07 75*21 34         [24] 1998 	mov	(_getChar_keypad_1_97 + 0x0005),#0x34
      000A0A 75*22 39         [24] 1999 	mov	(_getChar_keypad_1_97 + 0x0006),#0x39
      000A0D 75*23 38         [24] 2000 	mov	(_getChar_keypad_1_97 + 0x0007),#0x38
      000A10 75*24 37         [24] 2001 	mov	(_getChar_keypad_1_97 + 0x0008),#0x37
      000A13 75*25 23         [24] 2002 	mov	(_getChar_keypad_1_97 + 0x0009),#0x23
      000A16 75*26 30         [24] 2003 	mov	(_getChar_keypad_1_97 + 0x000a),#0x30
      000A19 75*27 2A         [24] 2004 	mov	(_getChar_keypad_1_97 + 0x000b),#0x2A
                                   2005 ;	assignment4.c:320: unsigned char gotkey = 0;
      000A1C 7F 00            [12] 2006 	mov	r7,#0x00
                                   2007 ;	assignment4.c:322: while (1) {
      000A1E                       2008 00110$:
                                   2009 ;	assignment4.c:323: row = 0xf7;  // The first row (connected to P0.3) will be zero
      000A1E 7E F7            [12] 2010 	mov	r6,#0xF7
                                   2011 ;	assignment4.c:325: for (i=0; i<4; ++i){ // loop over the 4 rows
      000A20 7D 00            [12] 2012 	mov	r5,#0x00
      000A22 7C 00            [12] 2013 	mov	r4,#0x00
      000A24                       2014 00112$:
                                   2015 ;	assignment4.c:327: P0 = 0xff;     // Initialize the 4 rows to '1' and set the column ports to inputs
      000A24 75 80 FF         [24] 2016 	mov	_P0,#0xFF
                                   2017 ;	assignment4.c:328: P0 = P0 & row; // clear one row at a time
      000A27 EE               [12] 2018 	mov	a,r6
      000A28 52 80            [12] 2019 	anl	_P0,a
                                   2020 ;	assignment4.c:329: col = P0 & 0x70;  // Read the 3 columns
      000A2A 74 70            [12] 2021 	mov	a,#0x70
      000A2C 55 80            [12] 2022 	anl	a,_P0
      000A2E FB               [12] 2023 	mov	r3,a
                                   2024 ;	assignment4.c:330: if (col != 0x70){ // If any column is zero i.e. a key is pressed
      000A2F BB 70 02         [24] 2025 	cjne	r3,#0x70,00131$
      000A32 80 22            [24] 2026 	sjmp	00102$
      000A34                       2027 00131$:
                                   2028 ;	assignment4.c:331: col = (~col) & 0x70;  // because the selected column returns zero
      000A34 EB               [12] 2029 	mov	a,r3
      000A35 F4               [12] 2030 	cpl	a
      000A36 FA               [12] 2031 	mov	r2,a
      000A37 74 70            [12] 2032 	mov	a,#0x70
      000A39 5A               [12] 2033 	anl	a,r2
                                   2034 ;	assignment4.c:332: col = col >> 5;       // The column variable now contain the number of the selected column
      000A3A C4               [12] 2035 	swap	a
      000A3B 03               [12] 2036 	rr	a
      000A3C 54 07            [12] 2037 	anl	a,#0x07
      000A3E FB               [12] 2038 	mov	r3,a
                                   2039 ;	assignment4.c:333: gotkey = keypad[i][col]; // Get the ASCII of the corresponding pressed key
      000A3F ED               [12] 2040 	mov	a,r5
      000A40 75 F0 03         [24] 2041 	mov	b,#0x03
      000A43 A4               [48] 2042 	mul	ab
      000A44 24r1C            [12] 2043 	add	a,#_getChar_keypad_1_97
      000A46 2B               [12] 2044 	add	a,r3
      000A47 F9               [12] 2045 	mov	r1,a
      000A48 87 07            [24] 2046 	mov	ar7,@r1
                                   2047 ;	assignment4.c:334: big_delay();
      000A4A C0 07            [24] 2048 	push	ar7
      000A4C 12r0Ar86         [24] 2049 	lcall	_big_delay
                                   2050 ;	assignment4.c:335: big_delay();
      000A4F 12r0Ar86         [24] 2051 	lcall	_big_delay
      000A52 D0 07            [24] 2052 	pop	ar7
                                   2053 ;	assignment4.c:336: break;  // Since a key was detected -> Exit the for loop
      000A54 80 0F            [24] 2054 	sjmp	00103$
      000A56                       2055 00102$:
                                   2056 ;	assignment4.c:338: row = row >> 1;   // No key is detected yet, try the next row
      000A56 EE               [12] 2057 	mov	a,r6
      000A57 C3               [12] 2058 	clr	c
      000A58 13               [12] 2059 	rrc	a
      000A59 FE               [12] 2060 	mov	r6,a
                                   2061 ;	assignment4.c:339: row = row | 0xf0; // Only one of the least 4 significant bits is '0' at a time 
      000A5A 43 06 F0         [24] 2062 	orl	ar6,#0xF0
                                   2063 ;	assignment4.c:325: for (i=0; i<4; ++i){ // loop over the 4 rows
      000A5D 0C               [12] 2064 	inc	r4
      000A5E 8C 05            [24] 2065 	mov	ar5,r4
      000A60 BC 04 00         [24] 2066 	cjne	r4,#0x04,00132$
      000A63                       2067 00132$:
      000A63 40 BF            [24] 2068 	jc	00112$
      000A65                       2069 00103$:
                                   2070 ;	assignment4.c:343: if (gotkey != 0)
      000A65 EF               [12] 2071 	mov	a,r7
      000A66 70 06            [24] 2072 	jnz	00111$
                                   2073 ;	assignment4.c:345: if (SW1 == 1 && SW0 == 1)
      000A68 30 B3 B3         [24] 2074 	jnb	_P3_3,00110$
      000A6B 30 B2 B0         [24] 2075 	jnb	_P3_2,00110$
                                   2076 ;	assignment4.c:346: break;
      000A6E                       2077 00111$:
                                   2078 ;	assignment4.c:349: return gotkey;
      000A6E 8F 82            [24] 2079 	mov	dpl,r7
      000A70 22               [24] 2080 	ret
                                   2081 ;------------------------------------------------------------
                                   2082 ;Allocation info for local variables in function 'returnHome'
                                   2083 ;------------------------------------------------------------
                                   2084 ;	assignment4.c:353: void returnHome(void) {
                                   2085 ;	-----------------------------------------
                                   2086 ;	 function returnHome
                                   2087 ;	-----------------------------------------
      000A71                       2088 _returnHome:
                                   2089 ;	assignment4.c:354: RS = 0;
      000A71 C2 A3            [12] 2090 	clr	_P2_3
                                   2091 ;	assignment4.c:355: P1 = 0x02; // LCD command to return home (the first location of the first lcd line)
      000A73 75 90 02         [24] 2092 	mov	_P1,#0x02
                                   2093 ;	assignment4.c:356: E = 1;
      000A76 D2 A2            [12] 2094 	setb	_P2_2
                                   2095 ;	assignment4.c:357: E = 0;
      000A78 C2 A2            [12] 2096 	clr	_P2_2
                                   2097 ;	assignment4.c:358: big_delay(); // This operation needs a bigger delay
      000A7A 02r0Ar86         [24] 2098 	ljmp	_big_delay
                                   2099 ;------------------------------------------------------------
                                   2100 ;Allocation info for local variables in function 'delay'
                                   2101 ;------------------------------------------------------------
                                   2102 ;c                         Allocated to registers r7 
                                   2103 ;------------------------------------------------------------
                                   2104 ;	assignment4.c:360: void delay(void) {
                                   2105 ;	-----------------------------------------
                                   2106 ;	 function delay
                                   2107 ;	-----------------------------------------
      000A7D                       2108 _delay:
                                   2109 ;	assignment4.c:362: for (c = 0; c < 50; c++);
      000A7D 7F 32            [12] 2110 	mov	r7,#0x32
      000A7F                       2111 00104$:
      000A7F EF               [12] 2112 	mov	a,r7
      000A80 14               [12] 2113 	dec	a
      000A81 FE               [12] 2114 	mov	r6,a
      000A82 FF               [12] 2115 	mov	r7,a
      000A83 70 FA            [24] 2116 	jnz	00104$
      000A85 22               [24] 2117 	ret
                                   2118 ;------------------------------------------------------------
                                   2119 ;Allocation info for local variables in function 'big_delay'
                                   2120 ;------------------------------------------------------------
                                   2121 ;c                         Allocated to registers r7 
                                   2122 ;------------------------------------------------------------
                                   2123 ;	assignment4.c:365: void big_delay(void) {
                                   2124 ;	-----------------------------------------
                                   2125 ;	 function big_delay
                                   2126 ;	-----------------------------------------
      000A86                       2127 _big_delay:
                                   2128 ;	assignment4.c:367: for (c = 0; c < 255; c++);
      000A86 7F FF            [12] 2129 	mov	r7,#0xFF
      000A88                       2130 00104$:
      000A88 8F 06            [24] 2131 	mov	ar6,r7
      000A8A 1E               [12] 2132 	dec	r6
      000A8B EE               [12] 2133 	mov	a,r6
      000A8C FF               [12] 2134 	mov	r7,a
      000A8D 70 F9            [24] 2135 	jnz	00104$
      000A8F 22               [24] 2136 	ret
                                   2137 ;------------------------------------------------------------
                                   2138 ;Allocation info for local variables in function 'timer_delay'
                                   2139 ;------------------------------------------------------------
                                   2140 ;	assignment4.c:370: void timer_delay(void) {	
                                   2141 ;	-----------------------------------------
                                   2142 ;	 function timer_delay
                                   2143 ;	-----------------------------------------
      000A90                       2144 _timer_delay:
                                   2145 ;	assignment4.c:371: TMOD = 0x01;
      000A90 75 89 01         [24] 2146 	mov	_TMOD,#0x01
                                   2147 ;	assignment4.c:372: TL0 = 0xAF;
      000A93 75 8A AF         [24] 2148 	mov	_TL0,#0xAF
                                   2149 ;	assignment4.c:373: TH0 = 0x3C;
      000A96 75 8C 3C         [24] 2150 	mov	_TH0,#0x3C
                                   2151 ;	assignment4.c:374: TR0 = 1;
      000A99 D2 8C            [12] 2152 	setb	_TR0
                                   2153 ;	assignment4.c:375: while (!TF0) ;
      000A9B                       2154 00101$:
      000A9B 30 8D FD         [24] 2155 	jnb	_TF0,00101$
                                   2156 ;	assignment4.c:376: TR0 = 0;
      000A9E C2 8C            [12] 2157 	clr	_TR0
                                   2158 ;	assignment4.c:377: TF0 = 0;
      000AA0 C2 8D            [12] 2159 	clr	_TF0
      000AA2 22               [24] 2160 	ret
                                   2161 ;------------------------------------------------------------
                                   2162 ;Allocation info for local variables in function '_sdcc_gsinit_startup'
                                   2163 ;------------------------------------------------------------
                                   2164 ;	assignment4.c:380: void _sdcc_gsinit_startup(void) {
                                   2165 ;	-----------------------------------------
                                   2166 ;	 function _sdcc_gsinit_startup
                                   2167 ;	-----------------------------------------
      000AA3                       2168 __sdcc_gsinit_startup:
                                   2169 ;	assignment4.c:384: __endasm;
      000AA3 75 81 5F         [24] 2170 	mov sp, #0x5F
                                   2171 ;	assignment4.c:385: main();
      000AA6 02r06r81         [24] 2172 	ljmp	_main
                                   2173 ;------------------------------------------------------------
                                   2174 ;Allocation info for local variables in function 'entryModeSet'
                                   2175 ;------------------------------------------------------------
                                   2176 ;	assignment4.c:387: void entryModeSet() {
                                   2177 ;	-----------------------------------------
                                   2178 ;	 function entryModeSet
                                   2179 ;	-----------------------------------------
      000AA9                       2180 _entryModeSet:
                                   2181 ;	assignment4.c:388: RS = 0;
      000AA9 C2 A3            [12] 2182 	clr	_P2_3
                                   2183 ;	assignment4.c:389: P1 = 0x06;  
      000AAB 75 90 06         [24] 2184 	mov	_P1,#0x06
                                   2185 ;	assignment4.c:390: E = 1;
      000AAE D2 A2            [12] 2186 	setb	_P2_2
                                   2187 ;	assignment4.c:391: E = 0;
      000AB0 C2 A2            [12] 2188 	clr	_P2_2
                                   2189 ;	assignment4.c:392: delay();
      000AB2 02r0Ar7D         [24] 2190 	ljmp	_delay
                                   2191 ;------------------------------------------------------------
                                   2192 ;Allocation info for local variables in function 'displayOnOffControl'
                                   2193 ;------------------------------------------------------------
                                   2194 ;	assignment4.c:395: void displayOnOffControl(__bit display, __bit cursor, __bit blinking) {
                                   2195 ;	-----------------------------------------
                                   2196 ;	 function displayOnOffControl
                                   2197 ;	-----------------------------------------
      000AB5                       2198 _displayOnOffControl:
                                   2199 ;	assignment4.c:396: P1_7 = 0;
      000AB5 C2 97            [12] 2200 	clr	_P1_7
                                   2201 ;	assignment4.c:397: P1_6 = 0;
      000AB7 C2 96            [12] 2202 	clr	_P1_6
                                   2203 ;	assignment4.c:398: P1_5 = 0;
      000AB9 C2 95            [12] 2204 	clr	_P1_5
                                   2205 ;	assignment4.c:399: P1_4 = 0;
      000ABB C2 94            [12] 2206 	clr	_P1_4
                                   2207 ;	assignment4.c:400: P1_3 = 1;
      000ABD D2 93            [12] 2208 	setb	_P1_3
                                   2209 ;	assignment4.c:401: P1_2 = display;
      000ABF A2*00            [12] 2210 	mov	c,_displayOnOffControl_PARM_1
      000AC1 92 92            [24] 2211 	mov	_P1_2,c
                                   2212 ;	assignment4.c:402: P1_1 = cursor;
      000AC3 A2*01            [12] 2213 	mov	c,_displayOnOffControl_PARM_2
      000AC5 92 91            [24] 2214 	mov	_P1_1,c
                                   2215 ;	assignment4.c:403: P1_0 = blinking;
      000AC7 A2*02            [12] 2216 	mov	c,_displayOnOffControl_PARM_3
      000AC9 92 90            [24] 2217 	mov	_P1_0,c
                                   2218 ;	assignment4.c:404: E = 1;
      000ACB D2 A2            [12] 2219 	setb	_P2_2
                                   2220 ;	assignment4.c:405: E = 0;
      000ACD C2 A2            [12] 2221 	clr	_P2_2
                                   2222 ;	assignment4.c:406: delay();
      000ACF 02r0Ar7D         [24] 2223 	ljmp	_delay
                                   2224 ;------------------------------------------------------------
                                   2225 ;Allocation info for local variables in function 'cursorOrDisplayShift'
                                   2226 ;------------------------------------------------------------
                                   2227 ;	assignment4.c:409: void cursorOrDisplayShift(__bit sc, __bit rl) {
                                   2228 ;	-----------------------------------------
                                   2229 ;	 function cursorOrDisplayShift
                                   2230 ;	-----------------------------------------
      000AD2                       2231 _cursorOrDisplayShift:
                                   2232 ;	assignment4.c:410: RS = 0;
      000AD2 C2 A3            [12] 2233 	clr	_P2_3
                                   2234 ;	assignment4.c:411: P1_7 = 0;
      000AD4 C2 97            [12] 2235 	clr	_P1_7
                                   2236 ;	assignment4.c:412: P1_6 = 0;
      000AD6 C2 96            [12] 2237 	clr	_P1_6
                                   2238 ;	assignment4.c:413: P1_5 = 0;
      000AD8 C2 95            [12] 2239 	clr	_P1_5
                                   2240 ;	assignment4.c:414: P1_4 = 1;
      000ADA D2 94            [12] 2241 	setb	_P1_4
                                   2242 ;	assignment4.c:415: P1_3 = sc;
      000ADC A2*03            [12] 2243 	mov	c,_cursorOrDisplayShift_PARM_1
      000ADE 92 93            [24] 2244 	mov	_P1_3,c
                                   2245 ;	assignment4.c:416: P1_2 = rl;
      000AE0 A2*04            [12] 2246 	mov	c,_cursorOrDisplayShift_PARM_2
      000AE2 92 92            [24] 2247 	mov	_P1_2,c
                                   2248 ;	assignment4.c:417: P1_1 = 0;
      000AE4 C2 91            [12] 2249 	clr	_P1_1
                                   2250 ;	assignment4.c:418: P1_0 = 0;
      000AE6 C2 90            [12] 2251 	clr	_P1_0
                                   2252 ;	assignment4.c:419: E = 1;
      000AE8 D2 A2            [12] 2253 	setb	_P2_2
                                   2254 ;	assignment4.c:420: E = 0;
      000AEA C2 A2            [12] 2255 	clr	_P2_2
                                   2256 ;	assignment4.c:421: delay();
      000AEC 02r0Ar7D         [24] 2257 	ljmp	_delay
                                   2258 ;------------------------------------------------------------
                                   2259 ;Allocation info for local variables in function 'functionSet'
                                   2260 ;------------------------------------------------------------
                                   2261 ;	assignment4.c:424: void functionSet(void) {
                                   2262 ;	-----------------------------------------
                                   2263 ;	 function functionSet
                                   2264 ;	-----------------------------------------
      000AEF                       2265 _functionSet:
                                   2266 ;	assignment4.c:425: RS = 0;
      000AEF C2 A3            [12] 2267 	clr	_P2_3
                                   2268 ;	assignment4.c:426: P1 = 0x38; // 8-bit mode, 2 lines LCD
      000AF1 75 90 38         [24] 2269 	mov	_P1,#0x38
                                   2270 ;	assignment4.c:427: E = 1;
      000AF4 D2 A2            [12] 2271 	setb	_P2_2
                                   2272 ;	assignment4.c:428: E = 0;
      000AF6 C2 A2            [12] 2273 	clr	_P2_2
                                   2274 ;	assignment4.c:429: delay();
      000AF8 02r0Ar7D         [24] 2275 	ljmp	_delay
                                   2276 ;------------------------------------------------------------
                                   2277 ;Allocation info for local variables in function 'clearDisplay'
                                   2278 ;------------------------------------------------------------
                                   2279 ;	assignment4.c:432: void clearDisplay(void) {
                                   2280 ;	-----------------------------------------
                                   2281 ;	 function clearDisplay
                                   2282 ;	-----------------------------------------
      000AFB                       2283 _clearDisplay:
                                   2284 ;	assignment4.c:433: RS = 0;
      000AFB C2 A3            [12] 2285 	clr	_P2_3
                                   2286 ;	assignment4.c:434: P1 = 0x01; // command to clear LCD and return the cursor to the home p
      000AFD 75 90 01         [24] 2287 	mov	_P1,#0x01
                                   2288 ;	assignment4.c:435: E = 1;
      000B00 D2 A2            [12] 2289 	setb	_P2_2
                                   2290 ;	assignment4.c:436: E = 0;
      000B02 C2 A2            [12] 2291 	clr	_P2_2
                                   2292 ;	assignment4.c:437: big_delay(); // This operation needs a bigger delay
      000B04 02r0Ar86         [24] 2293 	ljmp	_big_delay
                                   2294 ;------------------------------------------------------------
                                   2295 ;Allocation info for local variables in function 'setDdRamAddress'
                                   2296 ;------------------------------------------------------------
                                   2297 ;address                   Allocated to registers r7 
                                   2298 ;------------------------------------------------------------
                                   2299 ;	assignment4.c:440: void setDdRamAddress(char address) {  // Determine the place to place the next button - First LCD location address in 00h for line 1 and 40h for line 2
                                   2300 ;	-----------------------------------------
                                   2301 ;	 function setDdRamAddress
                                   2302 ;	-----------------------------------------
      000B07                       2303 _setDdRamAddress:
      000B07 AF 82            [24] 2304 	mov	r7,dpl
                                   2305 ;	assignment4.c:441: RS = 0;
      000B09 C2 A3            [12] 2306 	clr	_P2_3
                                   2307 ;	assignment4.c:442: P1 = address | 0x80;  // set the MSB to detect that this is an address
      000B0B 74 80            [12] 2308 	mov	a,#0x80
      000B0D 4F               [12] 2309 	orl	a,r7
      000B0E F5 90            [12] 2310 	mov	_P1,a
                                   2311 ;	assignment4.c:443: E = 1;
      000B10 D2 A2            [12] 2312 	setb	_P2_2
                                   2313 ;	assignment4.c:444: E = 0;
      000B12 C2 A2            [12] 2314 	clr	_P2_2
                                   2315 ;	assignment4.c:445: delay();
      000B14 02r0Ar7D         [24] 2316 	ljmp	_delay
                                   2317 ;------------------------------------------------------------
                                   2318 ;Allocation info for local variables in function 'sendChar'
                                   2319 ;------------------------------------------------------------
                                   2320 ;c                         Allocated to registers r7 
                                   2321 ;------------------------------------------------------------
                                   2322 ;	assignment4.c:448: void sendChar(char c) {  // Function to send one button to be displayed on the LCD
                                   2323 ;	-----------------------------------------
                                   2324 ;	 function sendChar
                                   2325 ;	-----------------------------------------
      000B17                       2326 _sendChar:
      000B17 AF 82            [24] 2327 	mov	r7,dpl
                                   2328 ;	assignment4.c:449: RS = 1;
      000B19 D2 A3            [12] 2329 	setb	_P2_3
                                   2330 ;	assignment4.c:450: P1 = c;
      000B1B 8F 90            [24] 2331 	mov	_P1,r7
                                   2332 ;	assignment4.c:451: E = 1;
      000B1D D2 A2            [12] 2333 	setb	_P2_2
                                   2334 ;	assignment4.c:452: E = 0;
      000B1F C2 A2            [12] 2335 	clr	_P2_2
                                   2336 ;	assignment4.c:453: delay();
      000B21 02r0Ar7D         [24] 2337 	ljmp	_delay
                                   2338 ;------------------------------------------------------------
                                   2339 ;Allocation info for local variables in function 'sendString'
                                   2340 ;------------------------------------------------------------
                                   2341 ;str                       Allocated to registers 
                                   2342 ;c                         Allocated to registers r3 
                                   2343 ;------------------------------------------------------------
                                   2344 ;	assignment4.c:456: void sendString(char* str) {  // Function to send a string of characters to be displayed on the lCD
                                   2345 ;	-----------------------------------------
                                   2346 ;	 function sendString
                                   2347 ;	-----------------------------------------
      000B24                       2348 _sendString:
      000B24 AD 82            [24] 2349 	mov	r5,dpl
      000B26 AE 83            [24] 2350 	mov	r6,dph
      000B28 AF F0            [24] 2351 	mov	r7,b
                                   2352 ;	assignment4.c:458: while (c = *str++) {
      000B2A                       2353 00101$:
      000B2A 8D 82            [24] 2354 	mov	dpl,r5
      000B2C 8E 83            [24] 2355 	mov	dph,r6
      000B2E 8F F0            [24] 2356 	mov	b,r7
      000B30 12r00r00         [24] 2357 	lcall	__gptrget
      000B33 FC               [12] 2358 	mov	r4,a
      000B34 A3               [24] 2359 	inc	dptr
      000B35 AD 82            [24] 2360 	mov	r5,dpl
      000B37 AE 83            [24] 2361 	mov	r6,dph
      000B39 EC               [12] 2362 	mov	a,r4
      000B3A FB               [12] 2363 	mov	r3,a
      000B3B 60 13            [24] 2364 	jz	00104$
                                   2365 ;	assignment4.c:459: sendChar(c);
      000B3D 8B 82            [24] 2366 	mov	dpl,r3
      000B3F C0 07            [24] 2367 	push	ar7
      000B41 C0 06            [24] 2368 	push	ar6
      000B43 C0 05            [24] 2369 	push	ar5
      000B45 12r0Br17         [24] 2370 	lcall	_sendChar
      000B48 D0 05            [24] 2371 	pop	ar5
      000B4A D0 06            [24] 2372 	pop	ar6
      000B4C D0 07            [24] 2373 	pop	ar7
      000B4E 80 DA            [24] 2374 	sjmp	00101$
      000B50                       2375 00104$:
      000B50 22               [24] 2376 	ret
                                   2377 	.area CSEG    (CODE)
                                   2378 	.area CONST   (CODE)
      000000                       2379 ___str_0:
      000000 30 30 7C 30 30 7C 30  2380 	.ascii "00|00|00"
             30
      000008 00                    2381 	.db 0x00
      000009                       2382 ___str_1:
      000009 30 31 7C 30 31 7C 30  2383 	.ascii "01|01|00"
             30
      000011 00                    2384 	.db 0x00
                                   2385 	.area XINIT   (CODE)
                                   2386 	.area CABS    (ABS,CODE)
